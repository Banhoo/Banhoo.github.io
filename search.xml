<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>列表</title>
    <url>/2020/09/19/Python/%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>列表是<strong>有序集合</strong>。要访问列表元素，可指出列表的<strong>名称</strong>，再指出元素的<strong>索引</strong>，并将其放入<strong>方括号</strong>内。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tips = [<span class="string">'welcome'</span>,<span class="string">'to'</span>,<span class="string">'my'</span>,<span class="string">'world'</span>]</span><br><span class="line">print(tips[<span class="number">0</span>])	<span class="comment"># ‘welcome’</span></span><br></pre></td></tr></table></figure>



<p><strong>在python中，第一个列表元素的索引为0，而不是1。</strong></p>
<p><strong>通过将索引指定为-1，可返回列表的最后一个元素。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tips = [<span class="string">'welcome'</span>,<span class="string">'to'</span>,<span class="string">'my'</span>,<span class="string">'world'</span>]</span><br><span class="line">print(tips[<span class="number">-1</span>])	<span class="comment"># ‘world’</span></span><br></pre></td></tr></table></figure>



<h2 id="修改列表元素"><a href="#修改列表元素" class="headerlink" title="修改列表元素"></a>修改列表元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tips = [<span class="string">'welcome'</span>,<span class="string">'to'</span>,<span class="string">'my'</span>,<span class="string">'world'</span>]</span><br><span class="line">print(tips)	<span class="comment"># 'welcome','to','my','world'</span></span><br><span class="line"></span><br><span class="line">tips[<span class="number">0</span>] = <span class="string">'go'</span></span><br><span class="line">print(tips)	<span class="comment"># 'go','to','my','world'</span></span><br></pre></td></tr></table></figure>



<h2 id="添加列表元素"><a href="#添加列表元素" class="headerlink" title="添加列表元素"></a>添加列表元素</h2><ol>
<li><p>在末尾添加元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tips = [<span class="string">'welcome'</span>,<span class="string">'to'</span>,<span class="string">'my'</span>,<span class="string">'world'</span>]</span><br><span class="line">tips.append(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line">print(tips)	<span class="comment"># 'welcome','to','my','world','hello'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>插入元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tips = [<span class="string">'welcome'</span>,<span class="string">'to'</span>,<span class="string">'my'</span>,<span class="string">'world'</span>]</span><br><span class="line">tips.insert(<span class="number">0</span>,<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line">print(tips)	<span class="comment"># 'hello','welcome','to','my','world'</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h2><ol>
<li><p>del语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tips = [<span class="string">'welcome'</span>,<span class="string">'to'</span>,<span class="string">'my'</span>,<span class="string">'world'</span>]</span><br><span class="line"><span class="keyword">del</span> tips[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">print(tips)	<span class="comment"># 'to','my','world'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>pop()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tips = [<span class="string">'welcome'</span>,<span class="string">'to'</span>,<span class="string">'my'</span>,<span class="string">'world'</span>]</span><br><span class="line">temp = tips.pop()</span><br><span class="line"></span><br><span class="line">print(temp)	<span class="comment"># 'world'</span></span><br><span class="line">print(tips)	<span class="comment"># 'welcome','to','my'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>pop()弹出任何位置的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tips = [<span class="string">'welcome'</span>,<span class="string">'to'</span>,<span class="string">'my'</span>,<span class="string">'world'</span>]</span><br><span class="line">temp = tips.pop(<span class="number">0</span>)</span><br><span class="line">print(temp)	<span class="comment"># 'world'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>根据值删除元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tips = [<span class="string">'welcome'</span>,<span class="string">'to'</span>,<span class="string">'my'</span>,<span class="string">'world'</span>]</span><br><span class="line">tips.remove(<span class="string">'my'</span>)</span><br><span class="line">print(tips)	<span class="comment"># 'welcome','to','world'</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>书记</category>
        <category>《Python编程从入门到实践》</category>
      </categories>
      <tags>
        <tag>书记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/2020/08/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1>]]></content>
      <categories>
        <category>书记</category>
        <category>《数据结构与算法分析》</category>
      </categories>
      <tags>
        <tag>书记</tag>
        <tag>算法</tag>
        <tag>归并排序</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉堆</title>
    <url>/2020/08/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/%E4%BA%8C%E5%8F%89%E5%A0%86/</url>
    <content><![CDATA[<h1 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h1><h2 id="堆基类"><a href="#堆基类" class="headerlink" title="堆基类"></a>堆基类</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Heap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//Heap()=default;</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShowHeap</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">Insert</span><span class="params">(T)</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> T <span class="title">Delete</span><span class="params">(T&amp;)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>





<h2 id="最大堆"><a href="#最大堆" class="headerlink" title="最大堆"></a>最大堆</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">MaxHeap</span> :</span><span class="keyword">public</span> Heap&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	T* heap;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">	<span class="keyword">int</span> capacity;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	MaxHeap(<span class="keyword">int</span>=DEFAULT_SIZE);</span><br><span class="line">	MaxHeap(T*, <span class="keyword">int</span> sz);</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ShowHeap</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Insert</span><span class="params">(T)</span></span>;</span><br><span class="line">	<span class="function">T <span class="title">Delete</span><span class="params">(T&amp;)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">PercolateUp</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">PercolateDown</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">	~MaxHeap();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">MaxHeap</span>&lt;T&gt;:</span>:MaxHeap(<span class="keyword">int</span> sz)</span><br><span class="line">&#123;</span><br><span class="line">	capacity = sz &gt; DEFAULT_SIZE ? sz : DEFAULT_SIZE;</span><br><span class="line">	heap = <span class="keyword">new</span> T[capacity + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span> (heap != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"MaxHeap created successfully!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"MaxHeap creation failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">MaxHeap</span>&lt;T&gt;:</span>:MaxHeap(T* arr, <span class="keyword">int</span> arrSize)</span><br><span class="line">&#123;</span><br><span class="line">	capacity = arrSize &gt; DEFAULT_SIZE ? arrSize : DEFAULT_SIZE;</span><br><span class="line">	heap = <span class="keyword">new</span> T[capacity + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span> (heap != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"MaxHeap created successfully!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"MaxHeap creation failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">size</span> = arrSize;</span><br><span class="line">	heap[<span class="number">0</span>] = INFMAX;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrSize; i++) &#123;</span><br><span class="line">		heap[i + <span class="number">1</span>] = arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">size</span>/<span class="number">2</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">		PercolateDown(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">MaxHeap</span>&lt;T&gt;:</span>:~MaxHeap()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">delete</span> []heap;</span><br><span class="line">	heap = <span class="literal">NULL</span>;</span><br><span class="line">	capacity = <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">MaxHeap</span>&lt;T&gt;:</span>:Insert(T element)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">size</span> &gt;= capacity) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: heap is full!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	heap[++<span class="built_in">size</span>] = element;</span><br><span class="line">	PercolateUp(<span class="built_in">size</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Insert "</span> &lt;&lt; element &lt;&lt; <span class="string">" successfully!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">MaxHeap</span>&lt;T&gt;:</span>:Delete(T&amp; element)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">size</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: heap is empty!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		element = heap[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">return</span> heap[<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> i, child;</span><br><span class="line">	T maxElement = heap[<span class="number">1</span>];</span><br><span class="line">	element = maxElement;</span><br><span class="line">	heap[<span class="number">1</span>] = heap[<span class="built_in">size</span>];</span><br><span class="line">	heap[<span class="built_in">size</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">size</span>--;</span><br><span class="line">	PercolateDown(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> maxElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">MaxHeap</span>&lt;T&gt;:</span>:ShowHeap()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i != <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; heap[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">MaxHeap</span>&lt;T&gt;:</span>:PercolateUp(<span class="keyword">int</span> start)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	T temp = heap[start];</span><br><span class="line">	<span class="keyword">for</span> (i = start; heap[i / <span class="number">2</span>] &lt; temp; i /= <span class="number">2</span>) &#123;</span><br><span class="line">		heap[i] = heap[i / <span class="number">2</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	heap[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">MaxHeap</span>&lt;T&gt;:</span>:PercolateDown(<span class="keyword">int</span> start)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> i, child;</span><br><span class="line">	T temp = heap[start];</span><br><span class="line">	<span class="keyword">for</span> (i = start; <span class="number">2</span> * i &lt;= <span class="built_in">size</span>; i = child) &#123;</span><br><span class="line">		child = <span class="number">2</span> * i;</span><br><span class="line">		<span class="keyword">if</span> (child != <span class="built_in">size</span> &amp;&amp; heap[child + <span class="number">1</span>] &gt; heap[child])</span><br><span class="line">			child++;</span><br><span class="line">		<span class="keyword">if</span> (temp &lt; heap[child]) &#123;</span><br><span class="line">			heap[i] = heap[child];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	heap[i] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="最小堆"><a href="#最小堆" class="headerlink" title="最小堆"></a>最小堆</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">MinHeap</span> :</span><span class="keyword">public</span> Heap&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	T* heap;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">	<span class="keyword">int</span> capacity;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	MinHeap(<span class="keyword">int</span> = DEFAULT_SIZE);</span><br><span class="line">	MinHeap(T*, <span class="keyword">int</span> sz);</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ShowHeap</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Insert</span><span class="params">(T)</span></span>;</span><br><span class="line">	<span class="function">T <span class="title">Delete</span><span class="params">(T&amp;)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">PercolateUp</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">PercolateDown</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">	~MinHeap();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">MinHeap</span>&lt;T&gt;:</span>:MinHeap(<span class="keyword">int</span> sz)</span><br><span class="line">&#123;</span><br><span class="line">	capacity = sz &gt; DEFAULT_SIZE ? sz : DEFAULT_SIZE;</span><br><span class="line">	heap = <span class="keyword">new</span> T[capacity + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span> (heap != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"MinHeap created successfully!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"MinHeap creation failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">MinHeap</span>&lt;T&gt;:</span>:MinHeap(T* arr, <span class="keyword">int</span> arrSize)</span><br><span class="line">&#123;</span><br><span class="line">	capacity = arrSize &gt; DEFAULT_SIZE ? arrSize : DEFAULT_SIZE;</span><br><span class="line">	heap = <span class="keyword">new</span> T[capacity + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span> (heap != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"MinHeap created successfully!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"MinHeap creation failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">size</span> = arrSize;</span><br><span class="line">	heap[<span class="number">0</span>] = INFMIN;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrSize; i++) &#123;</span><br><span class="line">		heap[i + <span class="number">1</span>] = arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">size</span> / <span class="number">2</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">		PercolateDown(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">MinHeap</span>&lt;T&gt;:</span>:~MinHeap()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">delete</span>[]heap;</span><br><span class="line">	heap = <span class="literal">NULL</span>;</span><br><span class="line">	capacity = <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">MinHeap</span>&lt;T&gt;:</span>:Insert(T element)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">size</span> &gt;= capacity) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: heap is full!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	heap[++<span class="built_in">size</span>] = element;</span><br><span class="line">	PercolateUp(<span class="built_in">size</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Insert "</span> &lt;&lt; element &lt;&lt; <span class="string">" successfully!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">MinHeap</span>&lt;T&gt;:</span>:Delete(T&amp; element)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">size</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: heap is empty!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		element = heap[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">return</span> heap[<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> i, child;</span><br><span class="line">	T maxElement = heap[<span class="number">1</span>];</span><br><span class="line">	element = maxElement;</span><br><span class="line">	heap[<span class="number">1</span>] = heap[<span class="built_in">size</span>];</span><br><span class="line">	heap[<span class="built_in">size</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">size</span>--;</span><br><span class="line">	PercolateDown(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> maxElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">MinHeap</span>&lt;T&gt;:</span>:ShowHeap()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i != <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; heap[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">MinHeap</span>&lt;T&gt;:</span>:PercolateUp(<span class="keyword">int</span> start)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	T temp = heap[start];</span><br><span class="line">	<span class="keyword">for</span> (i = start; heap[i / <span class="number">2</span>] &gt; temp; i /= <span class="number">2</span>) &#123;</span><br><span class="line">		heap[i] = heap[i / <span class="number">2</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	heap[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">MinHeap</span>&lt;T&gt;:</span>:PercolateDown(<span class="keyword">int</span> start)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> i, child;</span><br><span class="line">	T temp = heap[start];</span><br><span class="line">	<span class="keyword">for</span> (i = start; <span class="number">2</span> * i &lt;= <span class="built_in">size</span>; i = child) &#123;</span><br><span class="line">		child = <span class="number">2</span> * i;</span><br><span class="line">		<span class="keyword">if</span> (child != <span class="built_in">size</span> &amp;&amp; heap[child + <span class="number">1</span>] &lt; heap[child])</span><br><span class="line">			child++;</span><br><span class="line">		<span class="keyword">if</span> (temp &gt; heap[child]) &#123;</span><br><span class="line">			heap[i] = heap[child];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	heap[i] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="总代码"><a href="#总代码" class="headerlink" title="总代码"></a>总代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEFAULT_SIZE 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFMAX 1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFMIN -1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*堆基类*/</span></span><br><span class="line"><span class="comment">//================================================================//</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Heap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//Heap()=default;</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShowHeap</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">Insert</span><span class="params">(T)</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> T <span class="title">Delete</span><span class="params">(T&amp;)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*最大堆*/</span></span><br><span class="line"><span class="comment">//================================================================//</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">MaxHeap</span> :</span><span class="keyword">public</span> Heap&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	T* heap;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">	<span class="keyword">int</span> capacity;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	MaxHeap(<span class="keyword">int</span>=DEFAULT_SIZE);</span><br><span class="line">	MaxHeap(T*, <span class="keyword">int</span> sz);</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ShowHeap</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Insert</span><span class="params">(T)</span></span>;</span><br><span class="line">	<span class="function">T <span class="title">Delete</span><span class="params">(T&amp;)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">PercolateUp</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">PercolateDown</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">	~MaxHeap();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">MaxHeap</span>&lt;T&gt;:</span>:MaxHeap(<span class="keyword">int</span> sz)</span><br><span class="line">&#123;</span><br><span class="line">	capacity = sz &gt; DEFAULT_SIZE ? sz : DEFAULT_SIZE;</span><br><span class="line">	heap = <span class="keyword">new</span> T[capacity + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span> (heap != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"MaxHeap created successfully!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"MaxHeap creation failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">MaxHeap</span>&lt;T&gt;:</span>:MaxHeap(T* arr, <span class="keyword">int</span> arrSize)</span><br><span class="line">&#123;</span><br><span class="line">	capacity = arrSize &gt; DEFAULT_SIZE ? arrSize : DEFAULT_SIZE;</span><br><span class="line">	heap = <span class="keyword">new</span> T[capacity + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span> (heap != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"MaxHeap created successfully!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"MaxHeap creation failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">size</span> = arrSize;</span><br><span class="line">	heap[<span class="number">0</span>] = INFMAX;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrSize; i++) &#123;</span><br><span class="line">		heap[i + <span class="number">1</span>] = arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">size</span>/<span class="number">2</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">		PercolateDown(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">MaxHeap</span>&lt;T&gt;:</span>:~MaxHeap()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">delete</span> []heap;</span><br><span class="line">	heap = <span class="literal">NULL</span>;</span><br><span class="line">	capacity = <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">MaxHeap</span>&lt;T&gt;:</span>:Insert(T element)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">size</span> &gt;= capacity) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: heap is full!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	heap[++<span class="built_in">size</span>] = element;</span><br><span class="line">	PercolateUp(<span class="built_in">size</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Insert "</span> &lt;&lt; element &lt;&lt; <span class="string">" successfully!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">MaxHeap</span>&lt;T&gt;:</span>:Delete(T&amp; element)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">size</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: heap is empty!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		element = heap[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">return</span> heap[<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> i, child;</span><br><span class="line">	T maxElement = heap[<span class="number">1</span>];</span><br><span class="line">	element = maxElement;</span><br><span class="line">	heap[<span class="number">1</span>] = heap[<span class="built_in">size</span>];</span><br><span class="line">	heap[<span class="built_in">size</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">size</span>--;</span><br><span class="line">	PercolateDown(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> maxElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">MaxHeap</span>&lt;T&gt;:</span>:ShowHeap()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i != <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; heap[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">MaxHeap</span>&lt;T&gt;:</span>:PercolateUp(<span class="keyword">int</span> start)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	T temp = heap[start];</span><br><span class="line">	<span class="keyword">for</span> (i = start; heap[i / <span class="number">2</span>] &lt; temp; i /= <span class="number">2</span>) &#123;</span><br><span class="line">		heap[i] = heap[i / <span class="number">2</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	heap[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">MaxHeap</span>&lt;T&gt;:</span>:PercolateDown(<span class="keyword">int</span> start)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> i, child;</span><br><span class="line">	T temp = heap[start];</span><br><span class="line">	<span class="keyword">for</span> (i = start; <span class="number">2</span> * i &lt;= <span class="built_in">size</span>; i = child) &#123;</span><br><span class="line">		child = <span class="number">2</span> * i;</span><br><span class="line">		<span class="keyword">if</span> (child != <span class="built_in">size</span> &amp;&amp; heap[child + <span class="number">1</span>] &gt; heap[child])</span><br><span class="line">			child++;</span><br><span class="line">		<span class="keyword">if</span> (temp &lt; heap[child]) &#123;</span><br><span class="line">			heap[i] = heap[child];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	heap[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*最小堆*/</span></span><br><span class="line"><span class="comment">//================================================================//</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">MinHeap</span> :</span><span class="keyword">public</span> Heap&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	T* heap;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">	<span class="keyword">int</span> capacity;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	MinHeap(<span class="keyword">int</span> = DEFAULT_SIZE);</span><br><span class="line">	MinHeap(T*, <span class="keyword">int</span> sz);</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ShowHeap</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Insert</span><span class="params">(T)</span></span>;</span><br><span class="line">	<span class="function">T <span class="title">Delete</span><span class="params">(T&amp;)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">PercolateUp</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">PercolateDown</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">	~MinHeap();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">MinHeap</span>&lt;T&gt;:</span>:MinHeap(<span class="keyword">int</span> sz)</span><br><span class="line">&#123;</span><br><span class="line">	capacity = sz &gt; DEFAULT_SIZE ? sz : DEFAULT_SIZE;</span><br><span class="line">	heap = <span class="keyword">new</span> T[capacity + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span> (heap != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"MinHeap created successfully!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"MinHeap creation failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">MinHeap</span>&lt;T&gt;:</span>:MinHeap(T* arr, <span class="keyword">int</span> arrSize)</span><br><span class="line">&#123;</span><br><span class="line">	capacity = arrSize &gt; DEFAULT_SIZE ? arrSize : DEFAULT_SIZE;</span><br><span class="line">	heap = <span class="keyword">new</span> T[capacity + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span> (heap != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"MinHeap created successfully!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"MinHeap creation failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">size</span> = arrSize;</span><br><span class="line">	heap[<span class="number">0</span>] = INFMIN;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrSize; i++) &#123;</span><br><span class="line">		heap[i + <span class="number">1</span>] = arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">size</span> / <span class="number">2</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">		PercolateDown(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">MinHeap</span>&lt;T&gt;:</span>:~MinHeap()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">delete</span>[]heap;</span><br><span class="line">	heap = <span class="literal">NULL</span>;</span><br><span class="line">	capacity = <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">MinHeap</span>&lt;T&gt;:</span>:Insert(T element)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">size</span> &gt;= capacity) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: heap is full!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	heap[++<span class="built_in">size</span>] = element;</span><br><span class="line">	PercolateUp(<span class="built_in">size</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Insert "</span> &lt;&lt; element &lt;&lt; <span class="string">" successfully!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">MinHeap</span>&lt;T&gt;:</span>:Delete(T&amp; element)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">size</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: heap is empty!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		element = heap[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">return</span> heap[<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> i, child;</span><br><span class="line">	T maxElement = heap[<span class="number">1</span>];</span><br><span class="line">	element = maxElement;</span><br><span class="line">	heap[<span class="number">1</span>] = heap[<span class="built_in">size</span>];</span><br><span class="line">	heap[<span class="built_in">size</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">size</span>--;</span><br><span class="line">	PercolateDown(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> maxElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">MinHeap</span>&lt;T&gt;:</span>:ShowHeap()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i != <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; heap[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">MinHeap</span>&lt;T&gt;:</span>:PercolateUp(<span class="keyword">int</span> start)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	T temp = heap[start];</span><br><span class="line">	<span class="keyword">for</span> (i = start; heap[i / <span class="number">2</span>] &gt; temp; i /= <span class="number">2</span>) &#123;</span><br><span class="line">		heap[i] = heap[i / <span class="number">2</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	heap[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">MinHeap</span>&lt;T&gt;:</span>:PercolateDown(<span class="keyword">int</span> start)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> i, child;</span><br><span class="line">	T temp = heap[start];</span><br><span class="line">	<span class="keyword">for</span> (i = start; <span class="number">2</span> * i &lt;= <span class="built_in">size</span>; i = child) &#123;</span><br><span class="line">		child = <span class="number">2</span> * i;</span><br><span class="line">		<span class="keyword">if</span> (child != <span class="built_in">size</span> &amp;&amp; heap[child + <span class="number">1</span>] &lt; heap[child])</span><br><span class="line">			child++;</span><br><span class="line">		<span class="keyword">if</span> (temp &gt; heap[child]) &#123;</span><br><span class="line">			heap[i] = heap[child];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	heap[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//================================================================//</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> arr[] = &#123; <span class="number">23</span>, <span class="number">9</span>, <span class="number">34</span>, <span class="number">2</span>, <span class="number">56</span>, <span class="number">89</span>, <span class="number">35</span>, <span class="number">54</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> arr_size = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">	<span class="function">MaxHeap&lt;<span class="keyword">int</span>&gt; <span class="title">max_heap</span><span class="params">(arr, arr_size)</span></span>;</span><br><span class="line">	<span class="function">MinHeap&lt;<span class="keyword">int</span>&gt; <span class="title">min_heap</span><span class="params">(arr, arr_size)</span></span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"/************************最大堆************************/"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	max_heap.ShowHeap();</span><br><span class="line">	max_heap.Insert(<span class="number">99</span>);</span><br><span class="line">	max_heap.ShowHeap();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr_size + <span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> val, temp;</span><br><span class="line">		val = max_heap.Delete(temp);</span><br><span class="line">		<span class="keyword">if</span> (i) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; val;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"/************************最小堆************************/"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	min_heap.ShowHeap();</span><br><span class="line">	min_heap.Insert(<span class="number">1</span>);</span><br><span class="line">	min_heap.ShowHeap();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr_size + <span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> val, temp;</span><br><span class="line">		val = min_heap.Delete(temp);</span><br><span class="line">		<span class="keyword">if</span> (i) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; val;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>书记</category>
        <category>《数据结构与算法分析》</category>
      </categories>
      <tags>
        <tag>书记</tag>
        <tag>数据结构</tag>
        <tag>二叉堆</tag>
      </tags>
  </entry>
  <entry>
    <title>HDUOJ/2023</title>
    <url>/2020/06/03/HDUOJ/2023/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h1><p>假设一个班有n(n&lt;=50)个学生，每人考m(m&lt;=5)门课，求每个学生的平均成绩和每门课的平均成绩，并输出各科成绩均大于等于平均成绩的学生数量。</p>
<h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a><strong>输入</strong></h1><p>输入数据有多个测试实例，每个测试实例的第一行包括两个整数n和m，分别表示学生数和课程数。然后是n行数据，每行包括m个整数（即：考试分数）。</p>
<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a><strong>输出</strong></h1><p>对于每个测试实例，输出3行数据，第一行包含n个数据，表示n个学生的平均成绩，结果保留两位小数；第二行包含m个数据，表示m门课的平均成绩，结果保留两位小数；第三行是一个整数，表示该班级中各科成绩均大于等于平均成绩的学生数量。<br>每个测试实例后面跟一个空行。</p>
<h1 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 2</span><br><span class="line">5 10</span><br><span class="line">10 20</span><br></pre></td></tr></table></figure>

<h1 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7.50 15.00</span><br><span class="line">7.50 15.00</span><br><span class="line">1</span><br></pre></td></tr></table></figure>





<h1 id="代码（C-）"><a href="#代码（C-）" class="headerlink" title="代码（C++）"></a><strong>代码（C++）</strong></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> a[<span class="number">55</span>][<span class="number">5</span>] = &#123; <span class="number">0.0</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">cout</span>.setf(ios::fixed);</span><br><span class="line">	<span class="built_in">cout</span>.precision(<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &amp;&amp; n &lt;= <span class="number">50</span> &amp;&amp; m &lt;= <span class="number">5</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">double</span> b[<span class="number">55</span>] = &#123; <span class="number">0.0</span> &#125;, c[<span class="number">5</span>] = &#123; <span class="number">0.0</span> &#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">				<span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				b[i] += a[i][j];</span><br><span class="line">				c[j] += a[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			b[i] = b[i] / m;</span><br><span class="line">			<span class="keyword">if</span> (i) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; b[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			c[i] = c[i] / n;</span><br><span class="line">			<span class="keyword">if</span> (i) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; c[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (a[i][j] &lt; c[j])</span><br><span class="line">				&#123;</span><br><span class="line">					flag = <span class="literal">false</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (flag) sum++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HDUOJ</category>
      </categories>
      <tags>
        <tag>HDUOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>C#图解教程/异常</title>
    <url>/2020/06/01/C#%E5%9B%BE%E8%A7%A3%E6%95%99%E7%A8%8B/%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><strong>异常</strong>是程序中的运行错误，它违反了系统约束或者程序约束，或出现了在正常操作时未预料的情形。</p>
<p>如果程序没有提供处理该异常的代码，系统回挂起这个程序。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>,y = <span class="number">0</span>;</span><br><span class="line">    x /= y;							<span class="comment">//用0做被除数会抛出一个异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="try语句"><a href="#try语句" class="headerlink" title="try语句"></a>try语句</h1><p>try语句用来指明为避免出席那异常而被保护的代码段，并在发生异常时提供代码处理异常。try语句又3个部分组成。</p>
<ul>
<li>try块包含为避免出现异常而被保护的代码。</li>
<li>catch子句部分含有<strong>一个或多个</strong>catch子句。这些是处理异常的代码段，他们也称为是<strong>异常处理程序</strong>。</li>
<li>finally块含有在所有情况下都要被执行的代码，无论有没有异常发生。</li>
</ul>
<h2 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h2><p>实例显示除以0会导致一个异常。可以</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line">        x /= y;						<span class="comment">//抛出一个异常</span></span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">catch</span></span><br><span class="line">    &#123;</span><br><span class="line">        ...							<span class="comment">//处理异常的代码</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Handing all exceptions - Keep on Running"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="catch语句"><a href="#catch语句" class="headerlink" title="catch语句"></a>catch语句</h1><p>catch子句有3种形式，允许不同级别的处理。</p>
<ul>
<li>一般catch子句<ul>
<li>在catch关键字后没有参数列表</li>
<li>匹配try块中引起的任何异常类型</li>
</ul>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">catch</span></span><br><span class="line">&#123;</span><br><span class="line">	Statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>特定catch子句<ul>
<li>带有异常类的名称作为单一参数</li>
<li>匹配任何该类名称类型的异常</li>
</ul>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">catch</span>(ExceptionType)</span><br><span class="line">&#123;</span><br><span class="line">	Statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>带对象的特定catch子句<ul>
<li>在异常类名称之后包括一个标识符</li>
<li>该标识符在catch字句块中相当于一个本地变量，并称为异常变量</li>
<li>异常变量引用异常对象，并能被用于访问关于该对象的信息</li>
</ul>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">catch</span>(ExceptionType ExceptionVariable)</span><br><span class="line">&#123;</span><br><span class="line">	Statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ol>
<li>一般catch子句接受任何异常，但不能确定引发异常的类型。这只允许对任何可能发生的异常的普通处理和清理。</li>
<li>特定catch子句吧一个异常类的名称作为参数。他匹配该指定类或派生自它的异常类的异常。</li>
<li>带对象的特定catch子句提供关于异常的最多信息。他匹配该指定类或派生自它的异常类的异常。当然他给出一个异常实例（称为<strong>异常变量</strong>），是一个对CLR创建的异常对象引用。因此可以访问异常变量的属性，以获取关于引起的异常的详细信息。</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">catch</span>(IndexOutOfRangeException e)</span><br><span class="line">&#123;</span><br><span class="line">	Console.WriteLine(<span class="string">"Message:&#123;0&#125;"</span>,e.Message);</span><br><span class="line">	Console.WriteLine(<span class="string">"Source:&#123;0&#125;"</span>,e.Source);</span><br><span class="line">	Console.WriteLine(<span class="string">"Stack:&#123;0&#125;"</span>,e.StackTrace);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol>
<li>特定catch子句必须以一种顺序排列，最明确的异常类型第一，知道最普通的类型。允许多于一个。</li>
<li>如果有一个一般catch子句，它必须是最后一个，并且在所有特定catch子句之后。一般catch子句：只允许一个。</li>
</ol>
<h1 id="finally块"><a href="#finally块" class="headerlink" title="finally块"></a>finally块</h1><ul>
<li>如果在try块内部没有异常发生，控制流跳过任何catch子句并到finally块。</li>
<li>如果在try块内部发生了异常，那么在catch子句段中无论哪一个适当的catch子句被执行，接着就是finally块的执行。</li>
<li>即使在try块中有return语句火灾catch块中抛出一个异常，finally块也总是会在返回到调用代码之前执行。</li>
</ul>
<h1 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h1><p>可以使用throw语句使代码显示地引发一个异常。throw语句的语法如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> ExceptionObject;</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintArg</span>(<span class="params"><span class="keyword">string</span> arg</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arg==NULL)</span><br><span class="line">            &#123;</span><br><span class="line">                ArgumentNullException myEx=<span class="keyword">new</span> ArgumentNullException(<span class="string">"arg"</span>);</span><br><span class="line">                <span class="keyword">throw</span> myEx;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(arg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ArgumentNullException e)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Message:&#123;0&#125;"</span>,e.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">string</span> s=NULL;</span><br><span class="line">        MyClass.PrintArg(s);</span><br><span class="line">        MyClass.PrintArg(<span class="string">"Hi there!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="不带异常对象的抛出"><a href="#不带异常对象的抛出" class="headerlink" title="不带异常对象的抛出"></a>不带异常对象的抛出</h1><p>throw语句还可以不带异常对象使用，在catch块内部。</p>
<ul>
<li>这种形式重新抛出当前异常，系统积雪它的搜索，为该异常寻找另外的处理代码。</li>
<li>这种形式只能用在catch语句内部。</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintArg</span>(<span class="params"><span class="keyword">string</span> arg</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(arg==NULL)</span><br><span class="line">                &#123;</span><br><span class="line">                    ArgumentNullException myEx=<span class="keyword">new</span> ArgumentNullException(<span class="string">"arg"</span>);</span><br><span class="line">                    <span class="keyword">throw</span> myEx;</span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine(arg);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (ArgumentNullException e)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"Inner Catch:&#123;0&#125;"</span>,e.Message);</span><br><span class="line">                <span class="keyword">throw</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Outer Catch:Handing an Exception."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">string</span> s=NULL;</span><br><span class="line">        MyClass.PrintArg(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="异常类"><a href="#异常类" class="headerlink" title="异常类"></a>异常类</h1><p><strong>所有异常类都从根本上派生自System.Exception类。</strong></p>
<p>当一个异常发生时，CLR:</p>
<ol>
<li>创建该类型的异常对象；</li>
<li>寻找适当的catch子句处理它。</li>
</ol>
<p>异常对象含有只读属性，带有导致该异常的信息。例：Message，StackTrace，InnerException，HelpLink，Source等。</p>
<blockquote>
<p><strong>参考资料：</strong>《C#图解教程》</p>
</blockquote>
]]></content>
      <categories>
        <category>书记</category>
        <category>C#</category>
      </categories>
      <tags>
        <tag>书记</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>HDUOJ/2022</title>
    <url>/2020/05/31/HDUOJ/2022/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h1><p>potato老师虽然很喜欢教书，但是迫于生活压力，不得不想办法在业余时间挣点外快以养家糊口。<br>“做什么比较挣钱呢？筛沙子没力气，看大门又不够帅…”potato老师很是无奈。<br>“张艺谋比你还难看，现在多有钱呀，听说还要导演奥运开幕式呢！你为什么不去娱乐圈发展呢？”lwg在一旁出主意。<br>嗯，也是，为了生存，就委屈点到娱乐圈混混吧，马上就拍一部激光电影《杭电记忆——回来我的爱》。<br>说干就干，马上海选女主角（和老谋子学的，此举可以吸引媒体的眼球，呵呵），并且特别规定，演员必须具有ac的基本功，否则直接out!<br>由于策划师风之鱼（大师级水王）宣传到位，来应聘的MM很多，当然包括nit的蛋糕妹妹等呼声很高的美女，就连zjut的jqw都男扮女装来应聘（还好被安全顾问hdu_Bin-Laden认出，给轰走了），看来娱乐圈比acm还吸引人哪…<br>面试那天，刚好来了m<em>n个MM，站成一个m</em>n的队列，副导演Fe(OH)2为每个MM打了分数，分数都是32位有符号整数。<br>一开始我很纳闷：分数怎么还有负的？Fe(OH)2解释说，根据选拔规则，头发染成黄色、化妆太浓、穿的太少等等都要扣分数的，扣的多了就可能是负分了，当然，如果发现话语中夹有日语，就直接给-2147483648分了。<br>分数送上来了，是我做决定的时候了，我的一个选拔原则是，要选一个面试分数绝对值（必须还是32位整数）最大的MM。<br>特别说明：如果不幸选中一个负分的MM,也没关系，因为我觉得，如果不能吸引你，那要想法恶心你。</p>
<h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a><strong>输入</strong></h1><p>输入数据有多组，每组的第一行是两个整数m和n，表示应聘MM的总共的行列数，然后是m行整数，每行有n个，m和n的定义见题目的描述。</p>
<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a><strong>输出</strong></h1><p>对于每组输入数据，输出三个整数x,y和s，分别表示选中的MM的行号、列号和分数。<br>note:行号和列号从一开始，如果有多个MM的分数绝对值一样，那么输出排在最前面的一个（即行号最小的那个，如果行号相同则取列号最小的那个）。</p>
<h1 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 3</span><br><span class="line">1 4 -3</span><br><span class="line">-7 3 0</span><br></pre></td></tr></table></figure>

<h1 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 1 -7</span><br></pre></td></tr></table></figure>





<h1 id="代码（C-）"><a href="#代码（C-）" class="headerlink" title="代码（C++）"></a><strong>代码（C++）</strong></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">max</span>;</span><br><span class="line">	<span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> m, n;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m * n; i++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">		<span class="built_in">max</span> = <span class="built_in">abs</span>(a[<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m * n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> temp = <span class="built_in">abs</span>(a[i]);</span><br><span class="line">			<span class="keyword">if</span> (temp &gt; <span class="built_in">max</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">max</span> = temp;</span><br><span class="line">				index = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; index / n + <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; index % n + <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; a[index] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HDUOJ</category>
      </categories>
      <tags>
        <tag>HDUOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>HDUOJ/2021</title>
    <url>/2020/05/31/HDUOJ/2021/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h1><p>作为杭电的老师，最盼望的日子就是每月的8号了，因为这一天是发工资的日子，养家糊口就靠它了，呵呵<br>但是对于学校财务处的工作人员来说，这一天则是很忙碌的一天，财务处的小胡老师最近就在考虑一个问题：如果每个老师的工资额都知道，最少需要准备多少张人民币，才能在给每位老师发工资的时候都不用老师找零呢？<br>这里假设老师的工资都是正整数，单位元，人民币一共有100元、50元、10元、5元、2元和1元六种。</p>
<h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a><strong>输入</strong></h1><p>输入数据包含多个测试实例，每个测试实例的第一行是一个整数n（n&lt;100），表示老师的人数，然后是n个老师的工资。<br>n=0表示输入的结束，不做处理。</p>
<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a><strong>输出</strong></h1><p>对于每个测试实例输出一个整数x,表示至少需要准备的人民币张数。每个输出占一行。</p>
<h1 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 3</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h1 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>





<h1 id="代码（C-）"><a href="#代码（C-）" class="headerlink" title="代码（C++）"></a><strong>代码（C++）</strong></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> temp = a[i];</span><br><span class="line">			<span class="keyword">if</span> (temp / <span class="number">100</span> != <span class="number">0</span>) &#123; sum += temp / <span class="number">100</span>; temp -= temp / <span class="number">100</span> * <span class="number">100</span>; &#125;</span><br><span class="line">			<span class="keyword">if</span> (temp != <span class="number">0</span> &amp;&amp; temp / <span class="number">50</span> != <span class="number">0</span>) &#123; sum += temp / <span class="number">50</span>; temp -= temp / <span class="number">50</span> * <span class="number">50</span>; &#125;</span><br><span class="line">			<span class="keyword">if</span> (temp != <span class="number">0</span> &amp;&amp; temp / <span class="number">10</span> != <span class="number">0</span>) &#123; sum += temp / <span class="number">10</span>; temp -= temp / <span class="number">10</span> * <span class="number">10</span>; &#125;</span><br><span class="line">			<span class="keyword">if</span> (temp != <span class="number">0</span> &amp;&amp; temp / <span class="number">5</span> != <span class="number">0</span>) &#123; sum += temp / <span class="number">5</span>; temp -= temp / <span class="number">5</span> * <span class="number">5</span>; &#125;</span><br><span class="line">			<span class="keyword">if</span> (temp != <span class="number">0</span> &amp;&amp; temp / <span class="number">2</span> != <span class="number">0</span>) &#123; sum += temp / <span class="number">2</span>; temp -= temp / <span class="number">2</span> * <span class="number">2</span>; &#125;</span><br><span class="line">			<span class="keyword">if</span> (temp != <span class="number">0</span> &amp;&amp; temp / <span class="number">1</span> != <span class="number">0</span>) &#123; sum += temp / <span class="number">1</span>; temp -= temp / <span class="number">1</span> * <span class="number">1</span>; &#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HDUOJ</category>
      </categories>
      <tags>
        <tag>HDUOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>HDUOJ/2020</title>
    <url>/2020/05/28/HDUOJ/2020/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h1><p>输入n(n&lt;=100)个整数，按照绝对值从大到小排序后输出。题目保证对于每一个测试实例，所有的数的绝对值都不相等。</p>
<h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a><strong>输入</strong></h1><p>输入数据有多组，每组占一行，每行的第一个数字为n,接着是n个整数，n=0表示输入数据的结束，不做处理。</p>
<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a><strong>输出</strong></h1><p>对于每个测试实例，输出排序后的结果，两个数之间用一个空格隔开。每个测试实例占一行。</p>
<h1 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 3 -4 2</span><br><span class="line">4 0 1 2 -3</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h1 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-4 3 2</span><br><span class="line">-3 2 1 0</span><br></pre></td></tr></table></figure>





<h1 id="代码（C-）"><a href="#代码（C-）" class="headerlink" title="代码（C++）"></a><strong>代码（C++）</strong></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">int</span> x, y;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - i; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				x = <span class="built_in">abs</span>(a[j]);;</span><br><span class="line">				y = <span class="built_in">abs</span>(a[j + <span class="number">1</span>]);</span><br><span class="line">				<span class="keyword">if</span> (y &gt; x) swap(a[j], a[j + <span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HDUOJ</category>
      </categories>
      <tags>
        <tag>HDUOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>HDUOJ/2018</title>
    <url>/2020/05/26/HDUOJ/2018/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h1><p>有一头母牛，它每年年初生一头小母牛。每头小母牛从第四个年头开始，每年年初也生一头小母牛。请编程实现在第n年的时候，共有多少头母牛？</p>
<h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a><strong>输入</strong></h1><p>输入数据由多个测试实例组成，每个测试实例占一行，包括一个整数n(0&lt;n&lt;55)，n的含义如题目中描述。<br>n=0表示输入数据的结束，不做处理。</p>
<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a><strong>输出</strong></h1><p>对于每个测试实例，输出在第n年的时候母牛的数量。<br>每个输出占一行。</p>
<h1 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h1 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br></pre></td></tr></table></figure>





<h1 id="代码（C-）"><a href="#代码（C-）" class="headerlink" title="代码（C++）"></a><strong>代码（C++）</strong></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">60</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	a[<span class="number">1</span>] = <span class="number">1</span>; a[<span class="number">2</span>] = <span class="number">2</span>; a[<span class="number">3</span>] = <span class="number">3</span>; a[<span class="number">4</span>] = <span class="number">4</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &lt; <span class="number">60</span>; i++)</span><br><span class="line">		a[i] = a[i - <span class="number">1</span>] + a[i - <span class="number">3</span>];</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; a[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HDUOJ</category>
      </categories>
      <tags>
        <tag>HDUOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>HDUOJ/2017</title>
    <url>/2020/05/26/HDUOJ/2017/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h1><p>对于给定的一个字符串，统计其中数字字符出现的次数。</p>
<h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a><strong>输入</strong></h1><p>输入数据有多行，第一行是一个整数n，表示测试实例的个数，后面跟着n行，每行包括一个由字母和数字组成的字符串。</p>
<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a><strong>输出</strong></h1><p>对于每个测试实例，输出该串中数值的个数，每个输出占一行。</p>
<h1 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">asdfasdf123123asdfasdf</span><br><span class="line">asdf111111111asdfasdfasdf</span><br></pre></td></tr></table></figure>

<h1 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">9</span><br></pre></td></tr></table></figure>





<h1 id="代码（C-）"><a href="#代码（C-）" class="headerlink" title="代码（C++）"></a><strong>代码（C++）</strong></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">while</span> (n--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">string</span> s;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">		<span class="keyword">int</span> len = s.length();</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">			<span class="keyword">if</span> (s[i] &gt;= <span class="number">48</span> &amp;&amp; s[i] &lt;= <span class="number">57</span>) sum++;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HDUOJ</category>
      </categories>
      <tags>
        <tag>HDUOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>HDUOJ/2016</title>
    <url>/2020/05/26/HDUOJ/2016/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h1><p>输入n(n&lt;100)个数，找出其中最小的数，将它与最前面的数交换后输出这些数。</p>
<h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a><strong>输入</strong></h1><p>输入数据有多组，每组占一行，每行的开始是一个整数n，表示这个测试实例的数值的个数，跟着就是n个整数。n=0表示输入的结束，不做处理。</p>
<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a><strong>输出</strong></h1><p>对于每组输入数据，输出交换后的数列，每组输出占一行。</p>
<h1 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 2 1 3 4</span><br><span class="line">5 5 4 3 2 1</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h1 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2 3 4</span><br><span class="line">1 4 3 2 5</span><br></pre></td></tr></table></figure>





<h1 id="代码（C-）"><a href="#代码（C-）" class="headerlink" title="代码（C++）"></a><strong>代码（C++）</strong></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">int</span> a[<span class="number">105</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; a[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">min</span> = a[<span class="number">0</span>], index = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">			<span class="keyword">if</span> (a[i] &lt; <span class="built_in">min</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">min</span> = a[i];</span><br><span class="line">				index = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		swap(a[<span class="number">0</span>], a[index]);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; a[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; a[i];</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HDUOJ</category>
      </categories>
      <tags>
        <tag>HDUOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>HDUOJ/2019</title>
    <url>/2020/05/26/HDUOJ/2019/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h1><p>有n(n&lt;=100)个整数，已经按照从小到大顺序排列好，现在另外给一个整数x，请将该数插入到序列中，并使新的序列仍然有序。</p>
<h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a><strong>输入</strong></h1><p>输入数据包含多个测试实例，每组数据由两行组成，第一行是n和m，第二行是已经有序的n个数的数列。n和m同时为0标示输入数据的结束，本行不做处理。</p>
<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a><strong>输出</strong></h1><p>对于每个测试实例，输出插入新的元素后的数列。</p>
<h1 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 3</span><br><span class="line">1 2 4</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure>

<h1 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2 3 4</span><br></pre></td></tr></table></figure>





<h1 id="代码（C-）"><a href="#代码（C-）" class="headerlink" title="代码（C++）"></a><strong>代码（C++）</strong></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> i;</span><br><span class="line">		<span class="keyword">if</span> (n == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">		<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (m &gt;= a[j] &amp;&amp; m &lt;= a[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &gt; j + <span class="number">1</span>; k--)</span><br><span class="line">					a[k] = a[k - <span class="number">1</span>];</span><br><span class="line">				a[j + <span class="number">1</span>] = m;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; i + <span class="number">1</span>; m++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (m) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; a[m];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HDUOJ</category>
      </categories>
      <tags>
        <tag>HDUOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>HDUOJ/2015</title>
    <url>/2020/05/25/HDUOJ/2015/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h1><p>有一个长度为n(n&lt;=100)的数列，该数列定义为从2开始的递增有序偶数，现在要求你按照顺序每m个数求出一个平均值，如果最后不足m个，则以实际数量求平均值。编程输出该平均值序列。</p>
<h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a><strong>输入</strong></h1><p>输入数据有多组，每组占一行，包含两个正整数n和m，n和m的含义如上所述。</p>
<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a><strong>输出</strong></h1><p>对于每组输入数据，输出一个平均值序列，每组输出占一行。</p>
<h1 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 2</span><br><span class="line">4 2</span><br></pre></td></tr></table></figure>

<h1 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 6</span><br><span class="line">3 7</span><br></pre></td></tr></table></figure>





<h1 id="代码（C-）"><a href="#代码（C-）" class="headerlink" title="代码（C++）"></a><strong>代码（C++）</strong></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="keyword">int</span> i, j, sum, k;</span><br><span class="line">	<span class="keyword">bool</span> flag;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)</span><br><span class="line">	&#123;</span><br><span class="line">		i = <span class="number">1</span>; j = <span class="number">2</span>; sum = <span class="number">0</span>; k = <span class="number">0</span>; flag = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">while</span>(i&lt;=n)</span><br><span class="line">		&#123;</span><br><span class="line">			sum += j;</span><br><span class="line">			<span class="keyword">if</span> (i % m == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (flag)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; sum / m;</span><br><span class="line">					flag = <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; sum / m;</span><br><span class="line">				sum = <span class="number">0</span>; k = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> k++;</span><br><span class="line">			i++;</span><br><span class="line">			j += <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (k != <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; sum / k &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HDUOJ</category>
      </categories>
      <tags>
        <tag>HDUOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>循环队列</title>
    <url>/2020/03/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h1 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h1><h2 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">LoopQueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> front;										<span class="comment">//头指针</span></span><br><span class="line">	<span class="keyword">int</span> rear;										<span class="comment">//尾指针</span></span><br><span class="line">	T* <span class="built_in">queue</span>;										<span class="comment">//指向存储数据的队列数组</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	LoopQueue();									<span class="comment">//初始化队列</span></span><br><span class="line">	~LoopQueue();									<span class="comment">//销毁队列</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>;									<span class="comment">//判断队列是否为空</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;										<span class="comment">//返回队列的长度</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T element)</span></span>;							<span class="comment">//进队</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>;										<span class="comment">//出队</span></span><br><span class="line">	<span class="function">T <span class="title">top</span><span class="params">()</span></span>;										<span class="comment">//获取队首元素</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">()</span></span>;								<span class="comment">//遍历队列内的元素</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">LoopQueue</span>&lt;T&gt;:</span>:LoopQueue()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">queue</span> = <span class="keyword">new</span> T[MAXSIZE];							<span class="comment">//为队列分配内存</span></span><br><span class="line">	front = rear = <span class="number">0</span>;								<span class="comment">//初始化队列为空，头尾指针在同一位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">LoopQueue</span>&lt;T&gt;:</span>:~LoopQueue()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">delete</span>[] <span class="built_in">queue</span>;									<span class="comment">//释放内存</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">LoopQueue</span>&lt;T&gt;:</span>:isEmpty()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> (front == rear);							<span class="comment">//如果头尾指针位置相同则为空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">LoopQueue</span>&lt;T&gt;:</span>:<span class="built_in">size</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> (rear - front + MAXSIZE) % MAXSIZE;		<span class="comment">//计算公式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">LoopQueue</span>&lt;T&gt;:</span>:push(T e)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> ((rear + <span class="number">1</span>) % MAXSIZE == front)				<span class="comment">//如果队列已满，则返回false</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Queue is full, can not push !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">queue</span>[rear] = e;								<span class="comment">//否则从队尾进</span></span><br><span class="line">	rear = (rear + <span class="number">1</span>) % MAXSIZE;					<span class="comment">//将尾指针指向后一个区域</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">LoopQueue</span>&lt;T&gt;:</span>:pop()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (rear == front)								<span class="comment">//如果队列为空，则返回false</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Queue is empty, can not pop !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	front = (front + <span class="number">1</span>) % MAXSIZE;					<span class="comment">//将头指针指向后一个区域</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">LoopQueue</span>&lt;T&gt;:</span>:top()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (rear == front)								<span class="comment">//如果队列为空，则返回</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Queue is empty, can not pop !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">queue</span>[front];							<span class="comment">//否则返回头指针指向的数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">LoopQueue</span>&lt;T&gt;:</span>:Traverse()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (rear == front)								<span class="comment">//如果队列为空，则返回</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Queue is empty, can not pop !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> i = front;									<span class="comment">//定义变量i来记录头指针的下标</span></span><br><span class="line">	<span class="keyword">while</span> (i != rear)								<span class="comment">//没有和尾指针重合（遍历队列不为空）</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">queue</span>[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">		i = (i + <span class="number">1</span>) % MAXSIZE;						<span class="comment">//将i指向后一个区域</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LoopQueue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">		q.push(i);</span><br><span class="line">	q.Traverse();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; q.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	q.pop();</span><br><span class="line">	q.Traverse();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; q.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="链表实现"><a href="#链表实现" class="headerlink" title="链表实现"></a>链表实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">LinkNode</span>											//定义链节点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	T data;												<span class="comment">//存储数据域</span></span><br><span class="line">	LinkNode&lt;T&gt;* next;									<span class="comment">//定义指向下一个节点的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">LinkQueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	LinkNode&lt;T&gt;* front, * rear;							<span class="comment">//定义头指针和尾指针</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	LinkQueue();										<span class="comment">//创建队列</span></span><br><span class="line">	~LinkQueue();										<span class="comment">//销毁队列</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span></span>;										<span class="comment">//判断队列是否为空</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;											<span class="comment">//返回队列的大小</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span></span>;										<span class="comment">//进队</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>;											<span class="comment">//出队</span></span><br><span class="line">	<span class="function">T <span class="title">top</span><span class="params">()</span></span>;											<span class="comment">//返回首元素</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Traverse</span><span class="params">()</span></span>;									<span class="comment">//遍历队列</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">LinkQueue</span>&lt;T&gt;:</span>:LinkQueue()</span><br><span class="line">&#123;</span><br><span class="line">	front = rear = <span class="literal">NULL</span>;								<span class="comment">//初始化头尾指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">LinkQueue</span>&lt;T&gt;:</span>:~LinkQueue()</span><br><span class="line">&#123;</span><br><span class="line">	LinkNode&lt;T&gt;* ptr;									<span class="comment">//定义临时指针</span></span><br><span class="line">	<span class="keyword">while</span> (front != <span class="literal">NULL</span>)								<span class="comment">//队首元素不为空，则遍历队列</span></span><br><span class="line">	&#123;</span><br><span class="line">		ptr = front;									<span class="comment">//将指针指向队首元素</span></span><br><span class="line">		front = front-&gt;next;							<span class="comment">//头指针指向下一个元素</span></span><br><span class="line">		<span class="keyword">delete</span> ptr;										<span class="comment">//释放队首元素</span></span><br><span class="line">	&#125;</span><br><span class="line">	rear = <span class="literal">NULL</span>;										<span class="comment">//释放完毕，将尾指针置空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">LinkQueue</span>&lt;T&gt;:</span>:IsEmpty()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> (rear == <span class="literal">NULL</span>);								<span class="comment">//如果尾指针为空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">LinkQueue</span>&lt;T&gt;:</span>:<span class="built_in">size</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> s = <span class="number">0</span>;											<span class="comment">//用来计数</span></span><br><span class="line">	LinkNode&lt;T&gt;* ptr = front;							<span class="comment">//定义指针ptr指向首元素</span></span><br><span class="line">	<span class="keyword">while</span> (ptr != <span class="literal">NULL</span>)									<span class="comment">//当前元素不为空，则继续遍历</span></span><br><span class="line">	&#123;</span><br><span class="line">		++s;											<span class="comment">//遍历一个元素，个数加一</span></span><br><span class="line">		ptr = ptr-&gt;next;								<span class="comment">//指向下一个元素</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">LinkQueue</span>&lt;T&gt;:</span>:push(T e)</span><br><span class="line">&#123;</span><br><span class="line">	LinkNode&lt;T&gt;* tmp = <span class="keyword">new</span> LinkNode&lt;T&gt;;					<span class="comment">//为节点申请内存</span></span><br><span class="line">	tmp-&gt;data = e; tmp-&gt;next = <span class="literal">NULL</span>;					<span class="comment">//初始化节点</span></span><br><span class="line">	<span class="keyword">if</span> (rear == <span class="literal">NULL</span>)									<span class="comment">//如果当前队列为空</span></span><br><span class="line">	&#123;</span><br><span class="line">		front = rear = tmp;								<span class="comment">//则让头尾指针都指向插入节点</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;													<span class="comment">//如果当前队列不为空</span></span><br><span class="line">		rear-&gt;next = tmp;								<span class="comment">//尾插法将待插入节点接到尾节点的后面，成为新的尾节点</span></span><br><span class="line">		rear = rear-&gt;next;								<span class="comment">//尾指针指向队列尾部</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">LinkQueue</span>&lt;T&gt;:</span>:pop()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (rear == <span class="literal">NULL</span>)									<span class="comment">//如果队列为空，则返回false</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Queue is empty, can not pop !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LinkNode&lt;T&gt;* ptr = front;							<span class="comment">//定义指针ptr指向头节点</span></span><br><span class="line">	<span class="keyword">if</span> (front == rear) front = rear = <span class="literal">NULL</span>;				<span class="comment">//如果只有一个节点，则置空头尾指针</span></span><br><span class="line">	<span class="keyword">else</span> front = front-&gt;next;							<span class="comment">//如果不止一个，则让头指针指向下一个节点</span></span><br><span class="line">	<span class="keyword">delete</span> ptr;											<span class="comment">//将头节点销毁</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">LinkQueue</span>&lt;T&gt;:</span>:top()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (rear == <span class="literal">NULL</span>)									<span class="comment">//如果队列为空，则返回</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Queue is empty !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> rear-&gt;data;								<span class="comment">//否则返回头指针指向的节点的数据域（头节点的数据域）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">LinkQueue</span>&lt;T&gt;:</span>:Traverse()</span><br><span class="line">&#123;</span><br><span class="line">	LinkNode&lt;T&gt;* ptr = front;</span><br><span class="line">	<span class="keyword">if</span> (rear == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Queue is empty, can not traverse !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(ptr!=<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; ptr-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		ptr = ptr-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkQueue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">		q.push(i);</span><br><span class="line">	q.Traverse();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; q.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	q.pop();</span><br><span class="line">	q.Traverse();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; q.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>书记</category>
        <category>《数据结构与算法分析》</category>
      </categories>
      <tags>
        <tag>书记</tag>
        <tag>数据结构</tag>
        <tag>循环队列</tag>
      </tags>
  </entry>
  <entry>
    <title>栈</title>
    <url>/2020/03/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/%E6%A0%88/</url>
    <content><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="链表实现"><a href="#链表实现" class="headerlink" title="链表实现"></a>链表实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElementType data;										<span class="comment">//定义数据域</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span>* <span class="title">next</span>;</span>									<span class="comment">//指向下一个元素</span></span><br><span class="line">&#125;StackNode,LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitNode</span><span class="params">(StackNode* N)</span>									<span class="comment">//初始化栈节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	N-&gt;data = <span class="number">0</span>;</span><br><span class="line">	N-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(LinkStack*&amp; s)</span>								<span class="comment">//初始化栈顶指针</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	s = <span class="keyword">new</span> LinkStack;</span><br><span class="line">	s-&gt;data = <span class="number">0</span>;</span><br><span class="line">	s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyStack</span><span class="params">(LinkStack*&amp; s)</span>							<span class="comment">//销毁栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkStack* ptr, * tmp;</span><br><span class="line">	ptr = s-&gt;next;											<span class="comment">//初始化指针ptr指向栈顶元素</span></span><br><span class="line">	s-&gt;next = <span class="literal">NULL</span>;											<span class="comment">//将栈顶指针置空</span></span><br><span class="line">	<span class="keyword">while</span> (ptr != <span class="literal">NULL</span>)										<span class="comment">//当前节点的下一个节点存在，则继续遍历</span></span><br><span class="line">	&#123;</span><br><span class="line">		tmp = ptr-&gt;next;									<span class="comment">//初始化tmp指针指向下一个节点</span></span><br><span class="line">		<span class="keyword">delete</span> ptr;											<span class="comment">//销毁当前节点</span></span><br><span class="line">		ptr = tmp;											<span class="comment">//指向下一个节点</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(LinkStack* s)</span>									<span class="comment">//判断栈是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (s-&gt;next==<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(LinkStack*&amp; s, ElementType e)</span>						<span class="comment">//压栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkStack* n = <span class="keyword">new</span> LinkStack;							<span class="comment">//申请节点存储元素</span></span><br><span class="line">	n-&gt;data = e;											<span class="comment">//将数据存入节点</span></span><br><span class="line">	n-&gt;next = s-&gt;next;										<span class="comment">//将节点插在原栈顶元素之前</span></span><br><span class="line">	s-&gt;next = n;											<span class="comment">//移动栈顶指针指向插入元素（栈顶元素）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Pop</span><span class="params">(LinkStack*&amp; s, ElementType&amp; e)</span>						<span class="comment">//出栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s-&gt;next == <span class="literal">NULL</span>)									<span class="comment">//如果栈空则返回false</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Stack is empty !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LinkStack* ptr;</span><br><span class="line">	ptr = s-&gt;next;											<span class="comment">//定义指针ptr指向栈顶元素</span></span><br><span class="line">	e = ptr-&gt;data;											<span class="comment">//获取栈顶元素的数据</span></span><br><span class="line">	s-&gt;next = ptr-&gt;next;									<span class="comment">//让栈顶指针指向下一个节点（弹出栈顶元素）</span></span><br><span class="line">	<span class="keyword">delete</span> ptr;												<span class="comment">//销毁弹出的栈顶节点</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Element "</span> &lt;&lt; e &lt;&lt; <span class="string">" has been popped successfully !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Top</span><span class="params">(LinkStack*&amp; s, ElementType&amp; e)</span>						<span class="comment">//获取栈顶元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s-&gt;next == <span class="literal">NULL</span>)									<span class="comment">//如果栈空则返回false</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Stack is empty !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	e = s-&gt;next-&gt;data;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkStack* s;</span><br><span class="line">	ElementType e;</span><br><span class="line">	InitStack(s);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">		Push(s, i);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Pop(s, e);</span><br><span class="line">	&#125;</span><br><span class="line">	Pop(s, e);</span><br><span class="line">	Push(s, <span class="number">7</span>);</span><br><span class="line">	Top(s, e);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>书记</category>
        <category>《数据结构与算法分析》</category>
      </categories>
      <tags>
        <tag>书记</tag>
        <tag>数据结构</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法分析/表的数组实现</title>
    <url>/2020/03/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/%E8%A1%A8%E7%9A%84%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>抽象数据类型（Abstract Data Type , ADT）</strong>是一些操作的集合。抽象数据类型是数学的抽象，在ADT的定义中根本没涉及如何实现这些操作。这可以看作模块化设计的扩充。</p>
<h1 id="表-ADT"><a href="#表-ADT" class="headerlink" title="表 ADT"></a>表 ADT</h1><ul>
<li><p><strong>普通表</strong>：形如A1,A2,A3,……，An。表的大小是n，而且我们称大小为0的表为空表。</p>
</li>
<li><p><strong>后继</strong>：对于除空表外的任何表，A（i+1）是A（i）的后继。</p>
</li>
<li><p><strong>前驱</strong>：对于除空表外的任何表，A（i-1）是A（i）的前驱。</p>
</li>
</ul>
<p>  <strong>注意</strong>：A1不定义前驱元，也不定义An的后继元。</p>
<ul>
<li><p><strong>表的一些操作集合</strong>：</p>
<ul>
<li>PrintList：打印表；</li>
<li>MakeEmpty：清空表的元素；</li>
<li>Find：返回关键字首次出现的位置；</li>
<li>Insert：在表的某个位置插入某个元素；</li>
<li>Delete：在表的某个位置删除某个元素；</li>
<li>FindKth：返回某个位置上（作为参数指定）的元素。</li>
</ul>
<p>当然可以自己另外添加一些运算，例如Next和Previous，它们会取一个位置作为参数并分别返回其后继元和前驱元的位置。</p>
</li>
</ul>
<h1 id="表的数组实现"><a href="#表的数组实现" class="headerlink" title="表的数组实现"></a>表的数组实现</h1><p>对于表的所有操作都可以使用数组来实现。虽然数组是动态指定的，但还是需要对表的大小的最大值进行估计。通常需要估计得大一些，而这会浪费大量的空间。</p>
<p>数组实现是的PrintList和Find正如所预期的那样以线性时间执行，而FindKth则花费常数时间。然而，Insert和Delete花费是最昂贵的，最坏的情况为O（N），平均来看也要线性时间。只通过N次相继插入来建立一个表将需要二次时间。</p>
<p><strong>C++代码示例：</strong></p>
<p><strong>结构体定义</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType data[MAXSIZE];</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitSeqList</span><span class="params">(SqList&amp; L)</span><span class="comment">//初始化顺序表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(L.data, <span class="number">0</span>, <span class="keyword">sizeof</span>(L.data));</span><br><span class="line">	L.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(SqList&amp; L)</span><span class="comment">//判断是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (L.length == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">(SqList&amp; L)</span><span class="comment">//返回表的长度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> L.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisSeqList</span><span class="params">(SqList&amp; L)</span><span class="comment">//输出顺序表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; L.data[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetElem</span><span class="params">(SqList&amp; L, <span class="keyword">int</span> i, ElemType&amp; e)</span><span class="comment">//获取顺序表第i个元素，并赋值给e</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; i &lt; L.length)</span><br><span class="line">	&#123;</span><br><span class="line">		e = L.data[i - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Can't find element "</span>&lt;&lt;i&lt;&lt;<span class="string">" !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindElem</span><span class="params">(SqList&amp; L, ElemType e)</span><span class="comment">//查找元素e的位置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line">		<span class="keyword">if</span> (L.data[i] == e)</span><br><span class="line">			<span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Can't find element "</span> &lt;&lt; e &lt;&lt; <span class="string">" !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListInsert</span><span class="params">(SqList&amp; L, <span class="keyword">int</span> i, ElemType&amp; e)</span><span class="comment">//在顺序表第i处，插入数据e</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (L.length &gt;= MAXSIZE)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: The sequence is full and can't be inserted !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Insetion position error !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = L.length; j &gt; i - <span class="number">2</span>; j--)</span><br><span class="line">			L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">		L.data[i - <span class="number">1</span>] = e;</span><br><span class="line">		L.length++;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(SqList&amp; L, <span class="keyword">int</span> i, ElemType&amp; e)</span><span class="comment">//删除第i位置的数据e</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e = L.data[i];<span class="comment">//对删除数据进行备份,可以自选删除</span></span><br><span class="line">	<span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; i &lt; L.length)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &lt; L.length; j++)</span><br><span class="line">			L.data[j] = L.data[j + <span class="number">1</span>];</span><br><span class="line">		L.length--;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//自己去试试功能吧！</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>类定义</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Node ElemType</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>//创建一个节点类</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	DataType data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqList</span>//创建一个顺序表类</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Node* elem;</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	SqList();</span><br><span class="line">	~SqList();</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">CreateSqList</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">TraverseSqList</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">ElemType <span class="title">GetElemByIndex</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">GetElemByElem</span><span class="params">(DataType data)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">InsertSqList</span><span class="params">(<span class="keyword">int</span> n, DataType data)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">InsertSqListAtHead</span><span class="params">(DataType data)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">InsertSqListAtEnd</span><span class="params">(DataType data)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">DeleteElem</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">DeleteElemAtElem</span><span class="params">(DataType data)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">DeleteAll</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">DeleteAtHead</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SqList::SqList()<span class="comment">//初始化顺序表</span></span><br><span class="line">&#123;</span><br><span class="line">	elem = <span class="keyword">new</span> ElemType[MAXSIZE];</span><br><span class="line">	<span class="keyword">if</span> (!elem) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">	length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SqList::~SqList()<span class="comment">//销毁顺序表</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">delete</span>[] elem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SqList::CreateSqList</span><span class="params">(<span class="keyword">int</span> n)</span><span class="comment">//创建长度为n的顺序表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;                               </span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Wrong number of nodes entered !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> i;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input number "</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">"node:"</span>;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; elem[i].data;</span><br><span class="line">		&#125;</span><br><span class="line">		length = n;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SqList::TraverseSqList</span><span class="params">()</span><span class="comment">//遍历输出顺序表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)<span class="comment">//循环打印顺序表的每个节点数据</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Number"</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">"element is "</span> &lt;&lt; elem[i].data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">ElemType <span class="title">SqList::GetElemByIndex</span><span class="params">(<span class="keyword">int</span> i)</span><span class="comment">//通过下标获取元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; length)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Index of query does not exist !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> elem[i - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SqList::isEmpty</span><span class="params">()</span><span class="comment">//判断顺序表是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SqList::isFull</span><span class="params">()</span><span class="comment">//判断顺序表是否满</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (length == MAXSIZE) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SqList::GetLength</span><span class="params">()</span><span class="comment">//获取顺序表的长度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SqList::GetElemByElem</span><span class="params">(DataType data)</span><span class="comment">//判断是否存在寻找的值,如果存在将返回下标</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (elem &amp;&amp; elem[i].data == data)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (i == length - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SqList::InsertSqList</span><span class="params">(<span class="keyword">int</span> i, DataType data)</span><span class="comment">//在第i个位置，插入一个数据</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i&lt;<span class="number">1</span> || i &gt; length + <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Insertion position error !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (length &gt;= MAXSIZE)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: The sequence is full and can't be inserted !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = length - <span class="number">1</span>; j &gt;= i - <span class="number">1</span>; j--)</span><br><span class="line">			elem[j + <span class="number">1</span>] = elem[j];</span><br><span class="line">		elem[i - <span class="number">1</span>].data = data;</span><br><span class="line">		length++;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SqList::InsertSqListAtHead</span><span class="params">(DataType data)</span><span class="comment">//在头部插入一个新数据</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		elem[i + <span class="number">1</span>] = elem[i];</span><br><span class="line">	elem[<span class="number">0</span>].data = data;</span><br><span class="line">	length++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SqList::InsertSqListAtEnd</span><span class="params">(DataType data)</span><span class="comment">//在顺序表的最后插入数据</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (length &gt;= MAXSIZE)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: The sequence is full and can't be inserted !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		elem[length].data = data;</span><br><span class="line">		length++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SqList::DeleteElem</span><span class="params">(<span class="keyword">int</span> i)</span><span class="comment">//删除第i个节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line">	<span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;length)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Wrong number of nodes entered !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = i; j &lt;= length - <span class="number">1</span>; j++)</span><br><span class="line">			elem[j - <span class="number">1</span>] = elem[j];</span><br><span class="line">		length--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SqList::DeleteElemAtElem</span><span class="params">(DataType data)</span><span class="comment">//按值删除元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (elem[i].data != data &amp;&amp; i &lt; length)</span><br><span class="line">	&#123;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> index = i; index &lt;= length - <span class="number">1</span>; index++)</span><br><span class="line">	&#123;</span><br><span class="line">		elem[index] = elem[index + <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	length--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SqList::DeleteAll</span><span class="params">()</span><span class="comment">//删除所有元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = length; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		elem[i] = elem[i - <span class="number">1</span>];</span><br><span class="line">		length--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SqList::DeleteAtHead</span><span class="params">()</span><span class="comment">//从头部删除元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= length - <span class="number">1</span>; i++)</span><br><span class="line">		elem[i - <span class="number">1</span>] = elem[i];</span><br><span class="line">	length--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>当然你可以配合使用模板来编辑更复杂通用的例程，或者可以添加更多需求的功能函数。</strong></li>
</ul>
<blockquote>
<p><strong>参考资料</strong>：<a href="https://blog.csdn.net/qq_35143440/article/details/78917632?depth_1-utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener external nofollow noreferrer">C++实现顺序表的14种操作</a></p>
</blockquote>
]]></content>
      <categories>
        <category>书记</category>
        <category>《数据结构与算法分析》</category>
      </categories>
      <tags>
        <tag>书记</tag>
        <tag>数据结构</tag>
        <tag>表的数组实现</tag>
      </tags>
  </entry>
  <entry>
    <title>链表</title>
    <url>/2020/03/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>为了避免插入和删除的线性开销，我们允许表可以不连续存储，否则表的部分或全部需要整体移动。然后就有了表的一般想法。</p>
<p><img data-src="http://q7lkkqjql.bkt.clouddn.com/IMG_0039%2820200322-214539%29.PNG" alt=""></p>
<p><strong>链表</strong>由一系列不必再内存中相连的结构组成。每一个结构均含由表元素和指向包含该元素后继元的结构的指针。我们称之为Next指针。最后一个单元的Next指针指向NULL；该值由C定义并且不能与其他指针混淆。ANSI C规定NULL为零。</p>
<p>链表又分为<strong>双向链表</strong>和<strong>单向链表</strong>，其中单向链表指的是单一方向，指针只能指向下一单元的链表；双向链表则能同时指向上一单元和下一单元。</p>
<p><strong>示例代码：</strong></p>
<ul>
<li><strong>单链表结构体定义</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>									//设置节点结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElementType data;								<span class="comment">//存储节点的数据</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span>								<span class="comment">//存储指向下一个节点的指针</span></span><br><span class="line">&#125;PtrToNode,LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitNode</span><span class="params">(LinkList*&amp; N)</span>							<span class="comment">//初始化节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	N-&gt;data = <span class="number">0</span>;</span><br><span class="line">	N-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateLinkHead</span><span class="params">(LinkList*&amp; h,<span class="keyword">int</span> n)</span>				<span class="comment">//创建长度为n的链表（头插法）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	h = <span class="keyword">new</span> PtrToNode;								<span class="comment">//为头节点分配内存</span></span><br><span class="line">	PtrToNode* t;									<span class="comment">//t指针指向待插入的节点</span></span><br><span class="line">	h-&gt;data = <span class="number">0</span>; h-&gt;next = <span class="literal">NULL</span>;					<span class="comment">//将头节点初始化</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)						<span class="comment">//循环插入n个节点</span></span><br><span class="line">	&#123;</span><br><span class="line">		ElementType e;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; e;									<span class="comment">//输入插入节点的数据域</span></span><br><span class="line">		t = <span class="keyword">new</span> PtrToNode;							<span class="comment">//为插入的节点分配内存</span></span><br><span class="line">		t-&gt;data = e; t-&gt;next = <span class="literal">NULL</span>;				<span class="comment">//将数据存入节点，并初始化节点</span></span><br><span class="line">		t-&gt;next = h-&gt;next;							<span class="comment">//将待插入节点的指针域指向当前头节点的下一个节点</span></span><br><span class="line">		h-&gt;next = t;								<span class="comment">//将头节点的下一个节点更新为插入的节点</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateLinkTail</span><span class="params">(LinkList*&amp; h, <span class="keyword">int</span> n)</span>			<span class="comment">//创建长度为n的链表（尾插法）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PtrToNode* p, * t;								<span class="comment">//p指针指向表尾节点，t指针指向待插入节点</span></span><br><span class="line">	h = p = <span class="keyword">new</span> PtrToNode;							<span class="comment">//为头节点分配内存，刚开始p指向头节点</span></span><br><span class="line">	h-&gt;data = <span class="number">0</span>; h-&gt;next = <span class="literal">NULL</span>;					<span class="comment">//初始化头节点</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)						<span class="comment">//循环插入n个节点</span></span><br><span class="line">	&#123;</span><br><span class="line">		ElementType e;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; e;									<span class="comment">//输入插入节点的数据域</span></span><br><span class="line">		t = <span class="keyword">new</span> PtrToNode;							<span class="comment">//为插入的节点分配内存</span></span><br><span class="line">		t-&gt;data = e; t-&gt;next = <span class="literal">NULL</span>;				<span class="comment">//将数据存入节点，并初始化节点</span></span><br><span class="line">		p-&gt;next = t;								<span class="comment">//将表尾指针指向待插入节点</span></span><br><span class="line">		p = p-&gt;next;								<span class="comment">//将p指针移动至尾节点</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(LinkList*&amp; h)</span>							<span class="comment">//判断链表是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> h-&gt;next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsLast</span><span class="params">(LinkList*&amp; h, LinkList*&amp; p)</span>				<span class="comment">//判断p节点是否为尾节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> p-&gt;next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(LinkList*&amp; h, ElementType e)</span>			<span class="comment">//定位链表中元素e的位置，并返回位置t</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (h-&gt;next == <span class="literal">NULL</span>)							<span class="comment">//如果链表为空则返回0</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Linked list is empty !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> t = <span class="number">0</span>, i = <span class="number">1</span>;								<span class="comment">//t用来记录要查找的元素号次，i用来标记所有元素号次</span></span><br><span class="line">	PtrToNode* ptr = h-&gt;next;						<span class="comment">//初始化指针ptr指向第一个节点</span></span><br><span class="line">	<span class="keyword">while</span> (ptr)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (ptr-&gt;data == e)							<span class="comment">//找到该元素</span></span><br><span class="line">		&#123;</span><br><span class="line">			t = i;									<span class="comment">//记录号次</span></span><br><span class="line">			<span class="keyword">break</span>;									<span class="comment">//退出循环</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			ptr = ptr-&gt;next;						<span class="comment">//没找到则指向下一个节点</span></span><br><span class="line">			i++;									<span class="comment">//节点号次+1</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (t)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Element found successfully !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> t;									<span class="comment">//找到节点则返回号次</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Can't found element"</span> &lt;&lt; e &lt;&lt; <span class="string">" !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;									<span class="comment">//没找到则返回0</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertElement</span><span class="params">(LinkList*&amp; h, <span class="keyword">int</span> i, ElementType e)</span><span class="comment">//在链表h中第i位插入元素e</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PtrToNode* n, * pre = h;						<span class="comment">//n指针指向待插入节点，pre指针指向头节点</span></span><br><span class="line">	n = <span class="keyword">new</span> PtrToNode;								<span class="comment">//为待插入节点分配内存</span></span><br><span class="line">	n-&gt;data = e; n-&gt;next = <span class="literal">NULL</span>;					<span class="comment">//初始化待插入节点</span></span><br><span class="line">	<span class="keyword">if</span> (h-&gt;next == <span class="literal">NULL</span>)							<span class="comment">//如果链表为空</span></span><br><span class="line">	&#123;</span><br><span class="line">		h = n;										<span class="comment">//让头节点指向待插入节点</span></span><br><span class="line">		<span class="keyword">return</span>;										<span class="comment">//返回</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)						<span class="comment">//否则遍历链表至第i-1个元素</span></span><br><span class="line">		pre = pre-&gt;next;</span><br><span class="line">	n-&gt;next = pre-&gt;next;							<span class="comment">//让待插入节点的指针域指向第i-1个元素的下一个节点（其实就是指向第i个元素）</span></span><br><span class="line">	pre-&gt;next = n;									<span class="comment">//再把第i-1个元素的下一个节点更新为待插入节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DelElement</span><span class="params">(LinkList*&amp; h, <span class="keyword">int</span> i, ElementType&amp; e)</span><span class="comment">//删除链表中第i个元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (h-&gt;next == <span class="literal">NULL</span>);							<span class="comment">//如果链表为空则返回false</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Linked list is empty !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	PtrToNode* d, * pre = h;						<span class="comment">//定义指针d指向待删除节点，初始化指针pre指向头节点</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)						<span class="comment">//否则遍历链表至第i-1个元素</span></span><br><span class="line">		pre = pre-&gt;next;</span><br><span class="line">	d = pre-&gt;next;									<span class="comment">//让指针d指向待删除的节点</span></span><br><span class="line">	pre-&gt;next = d-&gt;next;							<span class="comment">//让第i-1个节点指向第i+1个节点，跳过第i个节点</span></span><br><span class="line">	e = d-&gt;data;									<span class="comment">//可以记录被删除的节点的值备用</span></span><br><span class="line">	<span class="keyword">delete</span> d;										<span class="comment">//删除第i个节点的空间</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Element "</span> &lt;&lt; e &lt;&lt; <span class="string">" deleted successfully !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;									<span class="comment">//删除成功返回true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DispLink</span><span class="params">(LinkList*&amp; h)</span>							<span class="comment">//输出链表的所有元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (h-&gt;next == <span class="literal">NULL</span>)							<span class="comment">//如果链表为空则返回false</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Linked list is empty !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	PtrToNode* ptr;									<span class="comment">//定义一个指针ptr</span></span><br><span class="line">	ptr = h-&gt;next;									<span class="comment">//让指针指向第一个节点</span></span><br><span class="line">	<span class="keyword">while</span> (ptr-&gt;next)								<span class="comment">//如果当前节点的下一个节点存在，则继续遍历</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; ptr-&gt;data &lt;&lt; <span class="string">"-&gt;"</span>;					<span class="comment">//输出当前节点的数据</span></span><br><span class="line">		ptr = ptr-&gt;next;							<span class="comment">//让指针指向下一个节点</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ptr-&gt;data &lt;&lt; <span class="built_in">endl</span>;						<span class="comment">//输出尾节点</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;									<span class="comment">//并且返回true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyLink</span><span class="params">(LinkList*&amp; h)</span>						<span class="comment">//释放链表（比较好的释放方法）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PtrToNode* p, * tmp;							<span class="comment">//指针tmp只是为了更好的释放链表，可以不用</span></span><br><span class="line">	p = h-&gt;next;									<span class="comment">//将指针p指向第一个节点</span></span><br><span class="line">	h-&gt;next = <span class="literal">NULL</span>;									<span class="comment">//将头指针置为空</span></span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span>)								<span class="comment">//如果节点存在则遍历删除</span></span><br><span class="line">	&#123;</span><br><span class="line">		tmp = p-&gt;next;								<span class="comment">//tmp临时指向下一个节点</span></span><br><span class="line">		<span class="keyword">delete</span> p;									<span class="comment">//释放当前节点</span></span><br><span class="line">		p = tmp;									<span class="comment">//再将指针p指向下一个节点</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Linked list delete successfully!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList* h;</span><br><span class="line">	ElementType temp;</span><br><span class="line">	CreateLinkTail(h, <span class="number">7</span>);</span><br><span class="line">	<span class="comment">//CreateLinkHead(h, 7);</span></span><br><span class="line">	DispLink(h);</span><br><span class="line">	InsertElement(h, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">	DispLink(h);</span><br><span class="line">	DelElement(h, <span class="number">3</span>, temp);</span><br><span class="line">	DispLink(h);</span><br><span class="line">	DestroyLink(h);</span><br><span class="line">	DispLink(h);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>依据自己的想法和需求实现的代码，写了很多注释，以后回过头来能看个明白。</strong></p>
</blockquote>
<ul>
<li>创建链表的方式有两种：<strong>头插法</strong>和<strong>尾插法</strong>。顾名思义，头插法就是始终让新节点一直处在第一个位置；尾接法就是始终让新节点处在最后一个位置。</li>
<li>但是，头插法产生的链表顺序会是<strong>逆序</strong>的，尾插法产生的链表是<strong>顺序</strong>的，所以平时比较习惯用尾插法。</li>
</ul>
<p><strong>头插法</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateLinkHead</span><span class="params">(LinkList*&amp; h,<span class="keyword">int</span> n)</span>				<span class="comment">//创建长度为n的链表（头插法）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	h = <span class="keyword">new</span> PtrToNode;								<span class="comment">//为头节点分配内存</span></span><br><span class="line">	PtrToNode* t;									<span class="comment">//t指针指向待插入的节点</span></span><br><span class="line">	h-&gt;data = <span class="number">0</span>; h-&gt;next = <span class="literal">NULL</span>;					<span class="comment">//将头节点初始化</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)						<span class="comment">//循环插入n个节点</span></span><br><span class="line">	&#123;</span><br><span class="line">		ElementType e;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; e;									<span class="comment">//输入插入节点的数据域</span></span><br><span class="line">		t = <span class="keyword">new</span> PtrToNode;							<span class="comment">//为插入的节点分配内存</span></span><br><span class="line">		t-&gt;data = e; t-&gt;next = <span class="literal">NULL</span>;				<span class="comment">//将数据存入节点，并初始化节点</span></span><br><span class="line">		t-&gt;next = h-&gt;next;							<span class="comment">//将待插入节点的指针域指向当前头节点的下一个节点</span></span><br><span class="line">		h-&gt;next = t;								<span class="comment">//将头节点的下一个节点更新为插入的节点</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>尾插法</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateLinkTail</span><span class="params">(LinkList*&amp; h, <span class="keyword">int</span> n)</span>			<span class="comment">//创建长度为n的链表（尾插法）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PtrToNode* p, * t;								<span class="comment">//p指针指向表尾节点，t指针指向待插入节点</span></span><br><span class="line">	h = p = <span class="keyword">new</span> PtrToNode;							<span class="comment">//为头节点分配内存，刚开始p指向头节点</span></span><br><span class="line">	h-&gt;data = <span class="number">0</span>; h-&gt;next = <span class="literal">NULL</span>;					<span class="comment">//初始化头节点</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)						<span class="comment">//循环插入n个节点</span></span><br><span class="line">	&#123;</span><br><span class="line">		ElementType e;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; e;									<span class="comment">//输入插入节点的数据域</span></span><br><span class="line">		t = <span class="keyword">new</span> PtrToNode;							<span class="comment">//为插入的节点分配内存</span></span><br><span class="line">		t-&gt;data = e; t-&gt;next = <span class="literal">NULL</span>;				<span class="comment">//将数据存入节点，并初始化节点</span></span><br><span class="line">		p-&gt;next = t;								<span class="comment">//将表尾指针指向待插入节点</span></span><br><span class="line">		p = p-&gt;next;								<span class="comment">//将p指针移动至尾节点</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>双链表</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>//定义节点类型</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElementType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">prev</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;PtrNode,DoubleLink;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitNode</span><span class="params">(DoubleLink*&amp; N)</span><span class="comment">//初始化节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	N-&gt;data = <span class="number">0</span>;</span><br><span class="line">	N-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	N-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList</span><span class="params">(DoubleLink*&amp; head, <span class="keyword">int</span> length)</span><span class="comment">//创建链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PtrNode* r, * s;</span><br><span class="line">	head = <span class="keyword">new</span> DoubleLink;</span><br><span class="line">	r = head;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ElementType e;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; e;</span><br><span class="line">		s = <span class="keyword">new</span> PtrNode;</span><br><span class="line">		s-&gt;data = e;</span><br><span class="line">		s-&gt;next = s-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">		r-&gt;next = s;</span><br><span class="line">		s-&gt;prev = r;</span><br><span class="line">		r = s;</span><br><span class="line">	&#125;</span><br><span class="line">	r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(DoubleLink*&amp; head, <span class="keyword">int</span> i, ElementType e)</span><span class="comment">//在第i位插入元素e</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PtrNode* n, * pre = head;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">		pre = pre-&gt;next;</span><br><span class="line">	<span class="keyword">if</span> (pre == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Can't find position "</span> &lt;&lt; i &lt;&lt; <span class="string">" !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		n = <span class="keyword">new</span> PtrNode;</span><br><span class="line">		n-&gt;data = e;</span><br><span class="line">		n-&gt;next = pre-&gt;next;</span><br><span class="line">		<span class="keyword">if</span> (pre-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">			pre-&gt;next-&gt;prev = n;</span><br><span class="line">		n-&gt;prev = pre;</span><br><span class="line">		pre-&gt;next = n;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(DoubleLink*&amp; head, <span class="keyword">int</span> i, ElementType&amp; e)</span><span class="comment">//删除第i位的元素e</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!head)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Linked list is empty !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	PtrNode* q, * pre = head;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">		pre = pre-&gt;next;</span><br><span class="line">	<span class="keyword">if</span> (pre == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Can't find position "</span> &lt;&lt; i &lt;&lt; <span class="string">" !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		q = pre-&gt;next;</span><br><span class="line">		<span class="keyword">if</span> (q == <span class="literal">NULL</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		e = q-&gt;data;</span><br><span class="line">		pre-&gt;next = q-&gt;next;</span><br><span class="line">		<span class="keyword">if</span> (q != <span class="literal">NULL</span>)</span><br><span class="line">			pre-&gt;next-&gt;prev = pre;</span><br><span class="line">		<span class="keyword">delete</span> q;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDisp</span><span class="params">(DoubleLink*&amp; head)</span><span class="comment">//输出链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!head)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Linked list is empty !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	PtrNode* p;</span><br><span class="line">	p = head-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="string">"&lt;-&gt;"</span>;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDestroy</span><span class="params">(DoubleLink*&amp; head)</span><span class="comment">//销毁链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PtrNode* p, * tmp;</span><br><span class="line">	p = head-&gt;next;</span><br><span class="line">	head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		tmp = p-&gt;next;</span><br><span class="line">		<span class="keyword">delete</span>(p);</span><br><span class="line">		p = tmp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DoubleLink* head;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>书记</category>
        <category>《数据结构与算法分析》</category>
      </categories>
      <tags>
        <tag>书记</tag>
        <tag>数据结构</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>讲讲Markdown语法</title>
    <url>/2020/03/21/%E8%AE%B2%E8%AE%B2Markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>Markdown</strong>是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br>我经常用他来写博客写文章，因为比较简洁（其实是<del>我比较懒</del>），但是确实和HTML编写相比，功能虽然少，但是十分轻便快捷，并且应该是能满足你编写的需求了。</p>
<p>虽然有很多支持<strong>Markdown</strong>语法的编辑器，就比如说Typora、MarkdownPad2这种文本编辑器，非常的方便，但是呢，作为一个语法还是最好了解一下，也用不了几分钟就会了。</p>
<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure>



<h1 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h1><ul>
<li><strong>连接</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Title](URL &quot;text&quot;)</span><br><span class="line">Title:链接显示的名字</span><br><span class="line">URL:链接的地址</span><br><span class="line">text:链接说明，可加可不加</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></table></figure>

<p>  效果：<a href="https://banhoo.top/">Hello World</a></p>
<ul>
<li><strong>高级链接</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你好，世界[Hello World][1]</span><br><span class="line">然后在文档最后为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">[1]:banhoo.top</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>加粗</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Hello World**</span><br></pre></td></tr></table></figure>

<p>  效果：<strong>Hello World</strong></p>
<ul>
<li><strong>斜字体</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*Hello World**</span><br></pre></td></tr></table></figure>

<p>  效果：<em>Hello World</em></p>
<ul>
<li><p><strong>段落</strong></p>
<p>这个好像没有什么特殊格式，直接编写文字就好了。</p>
<p>你可以直接再最后空两格以上，这代表自动换行；也可直接在两个段落之间多一个空行就行了。</p>
</li>
<li><p><strong>引用</strong></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; Hello World</span><br><span class="line">当然可以多个嵌套</span><br><span class="line">&gt; Hello World</span><br><span class="line">&gt;&gt; Hello World</span><br><span class="line">&gt;&gt;&gt; Hello World</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Hello World</p>
</blockquote>
<blockquote>
<p>Hello World</p>
<blockquote>
<p>Hello World</p>
<blockquote>
<p>Hello World</p>
</blockquote>
</blockquote>
</blockquote>
<ul>
<li><strong>列表</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.无序列表</span><br><span class="line">使用（*）、（+）、（-）作为列表标记；</span><br><span class="line">后面加上内容就会有列表的效果了。</span><br><span class="line"></span><br><span class="line">2.有序列表</span><br><span class="line">使用数字加上（.）作为列表标记；</span><br><span class="line">后面同样加上内容。</span><br><span class="line"></span><br><span class="line">3.列表嵌套</span><br><span class="line">其实就是一个列表里再次使用列表，要嵌套的列表首行空四格，然后接上面的无序列表格式或者有序列表格式就行了。</span><br></pre></td></tr></table></figure>

<p>  <strong>效果就不展示了，自己去试试就好了（最主要你看这篇文章页面的一个个带小黑点的就是列表）。</strong></p>
<h1 id="内嵌代码"><a href="#内嵌代码" class="headerlink" title="内嵌代码"></a>内嵌代码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">代码阅读可是程序员必备，所以有专门的代码格式那是必须的。</span><br><span class="line"></span><br><span class="line">单行代码：代码之间分别用一个反引号包起来。</span><br><span class="line">像这样：&#96;Hello World&#96;</span><br><span class="line"></span><br><span class="line">代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行。</span><br><span class="line">像这样：</span><br><span class="line">​\&#96;\&#96;\&#96;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	cout&lt;&lt;&quot;Hello World&quot;&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line">​\&#96;\&#96;\&#96;</span><br></pre></td></tr></table></figure>



<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">图片还是比较常用的</span><br><span class="line"></span><br><span class="line">![alt 属性文本](图片地址)</span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br><span class="line"></span><br><span class="line">当然可以使用上面高级链接的格式，依据个人喜好。</span><br></pre></td></tr></table></figure>

<p>  <strong>效果就不展示了，自己去试试就好了</strong></p>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 居中对齐 | 右对齐 |</span><br><span class="line">| ------ | :------: | -----: |</span><br><span class="line">| 单元格 |  单元格  | 单元格 |</span><br><span class="line">| 单元格 |  单元格  | 单元格 |</span><br></pre></td></tr></table></figure>


<h1 id="Markdown高级技巧"><a href="#Markdown高级技巧" class="headerlink" title="Markdown高级技巧"></a>Markdown高级技巧</h1><ul>
<li><p><strong>支持HTML元素</strong></p>
<p>原生Markdown语法是支持HTML的，所以Markdown无法表示的直接用HTML编辑就好了。</p>
</li>
</ul>
<ul>
<li><p><strong>转义</strong></p>
<p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\*\* Hello World \*\*</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>流程图和公式</strong></p>
<p>请自行查阅文献，再见，我也不会用。</p>
</li>
</ul>
<h1 id="溜了溜了"><a href="#溜了溜了" class="headerlink" title="溜了溜了"></a>溜了溜了</h1><p>  Markdown确实便利，而且现在很多平台都支持Markdown编写文章，所以得多加练习，编写文章的速度会大大提升的。</p>
<p>  当然，一个好的文本编辑器也重要，我用的是Typora简洁快捷，另外Markdown2和Visual Studio Coding都不错。</p>
]]></content>
      <categories>
        <category>琐</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛入门经典/第2章 循环结构程序设计</title>
    <url>/2020/02/18/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/%E7%AC%AC2%E7%AB%A0%20%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="第2章-循环结构程序设计"><a href="#第2章-循环结构程序设计" class="headerlink" title="第2章 循环结构程序设计"></a>第2章 循环结构程序设计</h1><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><blockquote>
<p>for循环的格式为：for(初始化；条件；调整) 循环体；</p>
</blockquote>
<ul>
<li>编写程序时，要特别留意“当前行”的跳转和变量的改变。</li>
<li>建议尽量缩短变量的定义范围。例如，在for循环的初始化部分定义循环变量。</li>
</ul>
<p><strong>1. aabb：输出所有形如aabb的4位完全平方数（即前两位数字相等，后两位数字也相等）。</strong></p>
<blockquote>
<p>7744问题（1）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	for(int a&#x3D;1;a&lt;&#x3D;9;a++)</span><br><span class="line">		for(int b&#x3D;0;b&lt;&#x3D;9;b++)</span><br><span class="line">		&#123;</span><br><span class="line">		int n&#x3D;a*1100+b*11;&#x2F;&#x2F;这里才开始使用n，因此在这里定义n</span><br><span class="line">		int m&#x3D;floor(sqrt(n)+0.5);&#x2F;&#x2F;四舍五入</span><br><span class="line">		if(m*m)&#x3D;&#x3D;n printf(&quot;%d\n&quot;,n);</span><br><span class="line">		&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>函数floor(x)的功能是返回不超过x的最大整数。</li>
<li>如果使用语句<strong>if(sqrt(n)==floor(sqrt(n))) printf(“%d\n”,n);</strong>，即直接判断sqrt(n)是否为整数。理论上当然没问题，但是这样写不保险，因为浮点数的运算（和函数）有可能存在误差。</li>
<li>浮点运算可能存在误差。在进行浮点数比较时，应考虑到浮点误差。</li>
</ul>
<blockquote>
<p>7744问题（2）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*该思路为枚举平方根，从而避免开平方操作，比开平方运算快。*&#x2F;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	for(int x&#x3D;1;;x++)</span><br><span class="line">	&#123;</span><br><span class="line">		int n&#x3D;x*x;</span><br><span class="line">		if(n&lt;1000) continue;</span><br><span class="line">		if(n&gt;9999) break;</span><br><span class="line">		int hi&#x3D;n&#x2F;100;&#x2F;&#x2F;求前两位数</span><br><span class="line">		int lo&#x3D;n%100;&#x2F;&#x2F;求后两位数</span><br><span class="line">		if(hi&#x2F;10&#x3D;&#x3D;hi%10&amp;&amp;lo&#x2F;10&#x3D;&#x3D;lo%10) printf(&quot;%d\n&quot;,n);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="while循环和do-while循环"><a href="#while循环和do-while循环" class="headerlink" title="while循环和do-while循环"></a>while循环和do-while循环</h2><blockquote>
<p>while循环的格式为：while（条件） 循环体；</p>
</blockquote>
<p><strong>2. 3n+1问题：<br>猜想：对于任意大于1的自然数n，若n为奇数，则将n变为3n+1，否则变为n的一半。经过若干次这样的变换，一定会时n变为1。例如，3-&gt;10-&gt;5-&gt;16-&gt;8-&gt;4-&gt;2-&gt;1。输入n，输出变换的次数。n&lt;=10⁹。</strong></p>
<blockquote>
<p>3n+1问题（有bug）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n,count&#x3D;0;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	while(n&gt;1)</span><br><span class="line">	&#123;</span><br><span class="line">		if(n%2&#x3D;&#x3D;1) n&#x3D;n*3+1;</span><br><span class="line">		else n&#x2F;&#x3D;2;</span><br><span class="line">		count++;</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;%d\n&quot;,count);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>当需要统计某种事物的个数时，可以用一个变量来充当计数器。</li>
<li>在观察无法找出错误时，可以用<strong>输出中间结果</strong>的方法差错。例如本题可在给n做变换的语句后加一条输出语句printf(“%d\n”,n)。很快就可找到问题：乘法溢出。</li>
<li>int整数的大小很可能是-2147483648至2147683647，即-2³¹~2³¹-1。“很可能”是因为C99中只规定了int至少是16位，却没有规定具体值。目前几乎在所有的比赛平台上，int都是32位整数。</li>
</ul>
<blockquote>
<p>3n+1问题</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n2,count&#x3D;0;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n2);</span><br><span class="line">	long long n&#x3D;n2;&#x2F;&#x2F;避开对long long的输入输出</span><br><span class="line">	while(n&gt;1)</span><br><span class="line">	&#123;</span><br><span class="line">		if(n%2&#x3D;&#x3D;1) n&#x3D;n*3+1;</span><br><span class="line">		else n&#x2F;&#x3D;2;</span><br><span class="line">		count++;</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;%d\n&quot;,count);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>long long在Linux下的输入输出格式符为%lld，但Windows平台中又是为%I64d。</li>
<li>do-while循环的格式为<strong>“do {循环体} while（条件）；”</strong>其中循环至少执行一次，每次执行完循环体后判断条件，当条件满足时继续循环。循环终止判断是在计算之后，而不是计算之前，这样的情况很适合使用do-while循环。</li>
</ul>
<h2 id="循环的代价"><a href="#循环的代价" class="headerlink" title="循环的代价"></a>循环的代价</h2><p><strong>3. 阶乘之和：输入n，计算S=1！+2！+3！+···+n！的末6位（不含前导0）。n&lt;=10⁶，n!表示前n个正整数之积。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;time.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	const int MOD&#x3D;1000000;</span><br><span class="line">	int n,S&#x3D;0;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	for(int i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		int factorial&#x3D;1;</span><br><span class="line">		for(int j&#x3D;1;j&lt;&#x3D;i;j++)</span><br><span class="line">			factorial&#x3D;(factorial*j%MOD);</span><br><span class="line">		S&#x3D;(S+factorial)%MOD;</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;%d\n&quot;,S);</span><br><span class="line">	printf(&quot;Time used&#x3D;%.2f\n&quot;,(double)clock()&#x2F;CLOCKS_PER_SEC);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>要计算只包含加法、减法和乘法额整数表达式除以正整数n的余数，可以在每步计算之后对n取余，结果不变。</li>
<li>可以使用time.h和clock()函数获得程序运行时间。常数CLOCKS_PER_SEC和操作系统相关，但是不要直接使用clock()的返回值，而应总是除以CLOCKS_PER_SEC。</li>
<li>为了避免输入数据的时间影响测试结果，可以使用<strong>“管道”</strong>的小技巧：在Windows命令行下执行<strong>echo 20|abc</strong>，操作系统会自动把20输入，其中abc为程序名。</li>
</ul>
<h2 id="算法竞赛中的输入输出框架"><a href="#算法竞赛中的输入输出框架" class="headerlink" title="算法竞赛中的输入输出框架"></a>算法竞赛中的输入输出框架</h2><p><strong>4. 数据统计：输入一些整数，求出它们的最小值、最大值和平均值（保留3位小数）。输入保证这些数都是不超过1000的整数。</strong></p>
<blockquote>
<p>: 数据统计（重定向版）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define LOCAL&#x2F;&#x2F;比赛提交之前删除即可</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#define INF 1000000000</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	FILE* stream;</span><br><span class="line">#ifdef LOCAL</span><br><span class="line">	freopen_s(&amp;stream,&quot;data.in&quot;,&quot;r&quot;,stdin);&#x2F;&#x2F;自己在程序文件夹中创建</span><br><span class="line">	freopen_s(&amp;stream,&quot;data.out&quot;,&quot;w&quot;,stdout);</span><br><span class="line">#endif</span><br><span class="line">	int x, n &#x3D; 0, min &#x3D; INF, max &#x3D; -INF, s &#x3D; 0;</span><br><span class="line">	while (scanf_s(&quot;%d&quot;, &amp;x) &#x3D;&#x3D; 1)</span><br><span class="line">	&#123;</span><br><span class="line">		s +&#x3D; x;</span><br><span class="line">		if (x &lt; min) min &#x3D; x;</span><br><span class="line">		if (x &gt; max) max &#x3D; x;</span><br><span class="line">		&#x2F;*printf(&quot;x&#x3D;%d,min&#x3D;%d,max&#x3D;%d\n&quot;,x,min,max);*&#x2F;</span><br><span class="line">		n++;</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;%d %d %.3f\n&quot;,min,max,(double)s&#x2F;n);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>scanf函数有返回值，它返回的是成功输入的变量个数，但输入结束时，scanf函数无法再次读取x，将返回0。</li>
</ul>
<blockquote>
<p>数据统计（fopen版）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#define INF 100000000</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	errno_t err;</span><br><span class="line">	FILE* fin, * fout;</span><br><span class="line">	&#x2F;&#x2F;fin &#x3D; stdin;</span><br><span class="line">	&#x2F;&#x2F;fout &#x3D; stdout;</span><br><span class="line">	err &#x3D; fopen_s(&amp;fin,&quot;data.in&quot;,&quot;rb&quot;);</span><br><span class="line">	err &#x3D; fopen_s(&amp;fout,&quot;data.out&quot;,&quot;wb&quot;);</span><br><span class="line">	int x, n &#x3D; 0, min &#x3D; INF, max &#x3D; -INF, s &#x3D; 0;</span><br><span class="line">	while (fscanf_s(fin, &quot;%d&quot;, &amp;x) &#x3D;&#x3D; 1)</span><br><span class="line">	&#123;</span><br><span class="line">		s +&#x3D; x;</span><br><span class="line">		if (x &lt; min) min &#x3D; x;</span><br><span class="line">		if (x &gt; max) max &#x3D; x;</span><br><span class="line">		n++;</span><br><span class="line">	&#125;</span><br><span class="line">	fprintf_s(fout,&quot;%d %d %.3f\n&quot;,min,max,(double)s&#x2F;n);</span><br><span class="line">	fclose(fin);</span><br><span class="line">	fclose(fout);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果想把fopen版的程序改成读写标准输入输出，只需赋值“fin=stdin，fout=stdout”，即可，不需要调用fopen和fclose。</li>
</ul>
<hr>
<blockquote>
<p>习题2-5 分数化小数<br>输入正整数a，b，c，输出a/b的小数形式，精确到小数点后c位。a，b&lt;=10^6,c&lt;=100。输入包含多组数据，结束标记位a=b=c=0。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int n, m[110];&#x2F;&#x2F;n整数部分，m小数部分 </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a, b, c, i, k &#x3D; 0;</span><br><span class="line">    while (scanf_s(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;c) &amp;&amp; a &amp;&amp; b &amp;&amp; c)</span><br><span class="line">    &#123;</span><br><span class="line">        k++;</span><br><span class="line">        n &#x3D; a &#x2F; b;</span><br><span class="line">        a &#x3D; a % b;</span><br><span class="line">        m[0] &#x3D; 0;&#x2F;&#x2F;十分位小数，可以进位为整数</span><br><span class="line">        for (i &#x3D; 1; i &lt;&#x3D; c; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            m[i] &#x3D; a * 10 &#x2F; b;</span><br><span class="line">            a &#x3D; a * 10 % b;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a * 10 &#x2F; b &gt;&#x3D; 5)&#x2F;&#x2F;第C+1位，四舍五入</span><br><span class="line">        &#123;</span><br><span class="line">            for (i &#x3D; c; i &gt;&#x3D; 0; i--)&#x2F;&#x2F;进位处理 </span><br><span class="line">            &#123;</span><br><span class="line">                m[i] &#x3D; m[i] + 1;</span><br><span class="line">                if (m[i] &lt; 10)</span><br><span class="line">                    break;&#x2F;&#x2F;若不存在进位，跳出循环。 </span><br><span class="line">                else</span><br><span class="line">                    m[i] -&#x3D; 10;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        n &#x3D; n + m[0];&#x2F;&#x2F;整数部分进位处理。 </span><br><span class="line">        printf(&quot;Case %d: %d.&quot;, k, n);&#x2F;&#x2F;打印整数部分及小数点</span><br><span class="line">        for (i &#x3D; 1; i &lt;&#x3D; c; i++)</span><br><span class="line">            printf(&quot;%d&quot;, m[i]);&#x2F;&#x2F;打印小数部分。 </span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>习题2-6 排列<br>用 1，2，3，……，9组成3个三位数abc，def和ghi，每个数字恰好使用一次，要求abc：def：ghi=1：2：3。按照“abc def ghi”的格式输出所有解，每行一个解。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">int i,j,v;bool a[10];&#x2F;&#x2F;ai表示第i个数已经用过了</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    for(i&#x3D;192;i&lt;&#x3D;327;i++)&#x2F;&#x2F;第一个数最小192，最大327。其实不知道的情况下简单来说是从123-329的但是算出来是最值就稍微改了下下</span><br><span class="line">    &#123;</span><br><span class="line">        memset(a,0,sizeof(a));v&#x3D;0;&#x2F;&#x2F;清零</span><br><span class="line">        a[i%10]&#x3D;a[i&#x2F;10%10]&#x3D;a[i&#x2F;100]&#x3D;a[i*2%10]&#x3D;a[i*2&#x2F;10%10]&#x3D;a[i*2&#x2F;100]&#x3D;a[i*3%10]&#x3D;a[i*3&#x2F;10%10]&#x3D;a[i*3&#x2F;100]&#x3D;1;&#x2F;&#x2F;统计数字</span><br><span class="line">        for(j&#x3D;1;j&lt;&#x3D;9;j++) v+&#x3D;a[j];&#x2F;&#x2F;v表示1-9这些数字是否全部齐了</span><br><span class="line">        if(v&#x3D;&#x3D;9) printf(&quot;%d %d %d\n&quot;,i,i*2,i*3);&#x2F;&#x2F;如果齐了就输出</span><br><span class="line">    &#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	double i;</span><br><span class="line">	for (i &#x3D; 0; i !&#x3D; 10; i +&#x3D; 0.1)</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;%.1f\n&quot;, i);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*这块代码会进入死循环：浮点数陷阱</span><br><span class="line"></span><br><span class="line">计算机的浮点数运算总会有误差（由“舍入”等引起），i自加0.1后并不是按照我们预想一样变成0.1，而是可能会变成0.100……01.</span><br><span class="line">这就是造成i ！&#x3D; 10这一条件永远成立的原因。</span><br><span class="line"></span><br><span class="line">实际上，计算机中的所有数据都用二进制表示，包括浮点数。这就导致某些浮点数不能用二进制精确表示，例如0.1（这很容易理解，就像10&#x2F;3不能被十进制精确表示一样）</span><br><span class="line"></span><br><span class="line">进一步地说，浮点数是采用分数+指数来表示的，例如</span><br><span class="line"></span><br><span class="line">0.5 &#x3D; 1&#x2F;2</span><br><span class="line"></span><br><span class="line">0.75 &#x3D; 1&#x2F;2 + 1&#x2F;(2^2)</span><br><span class="line"></span><br><span class="line">0.875 &#x3D; 1&#x2F;2 + 1&#x2F;(2^2) + 1&#x2F;(2^3)</span><br><span class="line"></span><br><span class="line">0.1 &#x3D; 1&#x2F;(2^4) + 1&#x2F;(2^5) + 1&#x2F;(2^8) + ...</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>本章学习感悟：</strong><br>这行代码我看的时候感觉就会输出10.0。但是书上说<strong>“请上机实验，不要凭主观感觉回答”</strong>，然后我就直接测试了一下，结果出乎意料！果然计算机不落实到实践上，光凭理论学习是不行的。</p>
</blockquote>
]]></content>
      <categories>
        <category>书记</category>
        <category>《算法竞赛（入门经典）》</category>
      </categories>
      <tags>
        <tag>书记</tag>
        <tag>算法（基础）</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛入门经典/第1章 程序设计入门</title>
    <url>/2020/02/16/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/%E7%AC%AC1%E7%AB%A0%20%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="第1章-程序设计入门"><a href="#第1章-程序设计入门" class="headerlink" title="第1章 程序设计入门"></a>第1章 程序设计入门</h1><h2 id="算数表达式"><a href="#算数表达式" class="headerlink" title="算数表达式"></a>算数表达式</h2><ol>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;%.1f\n&quot;,8.0&#x2F;5.0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>上面的<strong>%.1f</strong>意为输出结果保留小数点后1位。</li>
<li>整数值用<strong>%d</strong>输出，实数用<strong>%f</strong>输出。</li>
<li>整数/整数=整数；浮点数/浮点数=浮点数。</li>
</ul>
<ol start="2">
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;%.8f\n&quot;,1+2*sqrt(3)&#x2F;(5-0.1));</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><strong>5-0.1</strong>是什么？<br>确切的说法是：整数先变成浮点数，然后浮点数-浮点数=浮点数。</li>
<li>数学函数<strong>sqrt(x)</strong>作用是计算x的算术平方根，返回值类型为double。</li>
</ul>
<h2 id="变量及其输入"><a href="#变量及其输入" class="headerlink" title="变量及其输入"></a>变量及其输入</h2><ol start="3">
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int a,b;</span><br><span class="line">	scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">	printf(&quot;%d\n&quot;,a+b);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>scanf中的占位符和变量的数据类型应一一对应，且每个变量前需要加<strong>&amp;</strong>符号。</li>
</ul>
<ol start="4">
<li>圆柱体的表面积：输入底面半径r和高h，输出圆柱体的表面积，保留3位小数。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">&#123;</span><br><span class="line">	const double pi&#x3D;acos(-1.0);</span><br><span class="line">	double r,h,s1,s2,s;</span><br><span class="line">	scanf(&quot;%lf%lf&quot;,&amp;r,&amp;h);</span><br><span class="line">	s1&#x3D;pi*r*r;</span><br><span class="line">	s2&#x3D;2*pi*r*h;</span><br><span class="line">	s&#x3D;s1*2.0+s2;</span><br><span class="line">	printf(&quot;Area&#x3D;%.3f\n&quot;,s);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>在算法竞赛中，每行输出均应以回车符结束，包括最后一行。除非特别说明，每一行的行首不应有空格，但行末通常可以有多余空格。另外，输出的每两个书或者字符串之间应以单个空格隔开。</li>
<li>尽量用const关键字声明常数。<strong>表达常数∏：const double pi=acos(-1,0)</strong></li>
<li>赋值是个动作，先计算右边的值，在付给左边的变量，覆盖它原来的值。</li>
<li>输入采用的是<strong>%lf</strong>而不是%f。</li>
</ul>
<h2 id="顺序结构程序设计"><a href="#顺序结构程序设计" class="headerlink" title="顺序结构程序设计"></a>顺序结构程序设计</h2><ol start="5">
<li><p>三位数反转：输入一个三位数，分离出他的百位、十位和个位，反转后输出。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n,m;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	m&#x3D;(n%10)*100+(n&#x2F;10%10)*10+(n&#x2F;100);</span><br><span class="line">	printf(&quot;%03d\n&quot;,m);&#x2F;&#x2F;保留三位有效数字，不足左补0</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>交换变量：输入两个整数a和b，交换二者的值，然后输出。</p>
<blockquote>
<p>: （1）三变量法（经典）</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int a,b,t;</span><br><span class="line">	scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">	t&#x3D;a;</span><br><span class="line">	a&#x3D;b;</span><br><span class="line">	b&#x3D;t;</span><br><span class="line">	printf(&quot;%d %d\n&quot;,a,b);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>: （2）不借助任何变量（只适用于定义了加减法的数据类型）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	#include&lt;stdio.h&gt;</span><br><span class="line">	int main()</span><br><span class="line">	&#123;</span><br><span class="line">	int a,b;</span><br><span class="line">	scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">	a&#x3D;a+b;</span><br><span class="line">	b&#x3D;a-b;</span><br><span class="line">	a&#x3D;a-b;</span><br><span class="line">	printf(&quot;%d %d\n&quot;,a,b);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>: （3）最适合本题的解法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a,b;</span><br><span class="line">scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">printf(&quot;%d %d\n&quot;,b,a);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>我们的目标是解决问题，而不是为了写程序而写程序，同时应保持简单（Keep It Simple and Stupid,KISS），而不是自己创造条件去展示编程技巧。</li>
</ul>
<h2 id="分支结构程序设计"><a href="#分支结构程序设计" class="headerlink" title="分支结构程序设计"></a>分支结构程序设计</h2><ol start="7">
<li>鸡兔同笼：已知鸡和兔的总数量位n，总腿数为m。输入n和m，依次输出鸡的数目和兔的数目。如果无解则输出No answer。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int a,b,n,m;</span><br><span class="line">	scanf(&quot;%d%d&quot;,&amp;n,&amp;m);</span><br><span class="line">	a&#x3D;(4*n-m)&#x2F;2;</span><br><span class="line">	b&#x3D;n-a;</span><br><span class="line">	if(m%2&#x3D;&#x3D;1||a&lt;0||b&lt;0)</span><br><span class="line">		printf(&quot;No answer\n&quot;);</span><br><span class="line">	else</span><br><span class="line">		printf(&quot;%d %d\n&quot;,a,b);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>C语言中的逻辑运算符都是短路运算符。一旦能够确定整个表达式的值，就不再继续计算。</li>
</ul>
<ol start="8">
<li>三整数排序<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int a,b,c,t;</span><br><span class="line">	scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);</span><br><span class="line">	if(a&gt;b) &#123;t&#x3D;a;a&#x3D;b;b&#x3D;t;&#125;</span><br><span class="line">	if(a&gt;c) &#123;t&#x3D;a;a&#x3D;c;c&#x3D;t;&#125;</span><br><span class="line">	if(b&gt;c) &#123;t&#x3D;b;b&#x3D;c;c&#x3D;t;&#125;</span><br><span class="line">	printf(&quot;%d %d %d\n&quot;,a,b,c);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>书记</category>
        <category>《算法竞赛（入门经典）》</category>
      </categories>
      <tags>
        <tag>书记</tag>
        <tag>算法（基础）</tag>
      </tags>
  </entry>
  <entry>
    <title>Welcome to Banhoo</title>
    <url>/2020/02/13/welcome-to-Banhoo/</url>
    <content><![CDATA[<p>Welcome to Banhoo!</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener external nofollow noreferrer">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener external nofollow noreferrer">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener external nofollow noreferrer">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener external nofollow noreferrer">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener external nofollow noreferrer">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener external nofollow noreferrer">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener external nofollow noreferrer">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener external nofollow noreferrer">Deployment</a></p>
]]></content>
  </entry>
</search>
