<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Banhoo&#39;s Blog</title>
  
  <subtitle>记住，不要依赖梦想而忘记生活。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://banhoo.top/"/>
  <updated>2020-03-21T14:55:37.746Z</updated>
  <id>http://banhoo.top/</id>
  
  <author>
    <name>Banhoo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>讲讲Markdown语法</title>
    <link href="http://banhoo.top/2020/03/21/%E8%AE%B2%E8%AE%B2Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://banhoo.top/2020/03/21/%E8%AE%B2%E8%AE%B2Markdown%E8%AF%AD%E6%B3%95/</id>
    <published>2020-03-21T01:19:00.000Z</published>
    <updated>2020-03-21T14:55:37.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>Markdown</strong>是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br>我经常用他来写博客写文章，因为比较简洁（其实是<del>我比较懒</del>），但是确实和HTML编写相比，功能虽然少，但是十分轻便快捷，并且应该是能满足你编写的需求了。</p><p>虽然有很多支持<strong>Markdown</strong>语法的编辑器，就比如说Typora、MarkdownPad2这种文本编辑器，非常的方便，但是呢，作为一个语法还是最好了解一下，也用不了几分钟就会了。</p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><h1 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h1><ul><li><strong>连接</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Title](URL &quot;text&quot;)</span><br><span class="line">Title:链接显示的名字</span><br><span class="line">URL:链接的地址</span><br><span class="line">text:链接说明，可加可不加</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></table></figure><p>  效果：<a href="https://banhoo.top/">Hello World</a></p><ul><li><strong>高级链接</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">你好，世界[Hello World][1]</span><br><span class="line">然后在文档最后为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">[1]:banhoo.top</span><br></pre></td></tr></table></figure><ul><li><strong>加粗</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**Hello World**</span><br></pre></td></tr></table></figure><p>  效果：<strong>Hello World</strong></p><ul><li><strong>斜字体</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*Hello World**</span><br></pre></td></tr></table></figure><p>  效果：<em>Hello World</em></p><ul><li><p><strong>段落</strong></p><p>这个好像没有什么特殊格式，直接编写文字就好了。</p><p>你可以直接再最后空两格以上，这代表自动换行；也可直接在两个段落之间多一个空行就行了。</p></li><li><p><strong>引用</strong></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; Hello World</span><br><span class="line">当然可以多个嵌套</span><br><span class="line">&gt; Hello World</span><br><span class="line">&gt;&gt; Hello World</span><br><span class="line">&gt;&gt;&gt; Hello World</span><br></pre></td></tr></table></figure><blockquote><p>Hello World</p></blockquote><blockquote><p>Hello World</p><blockquote><p>Hello World</p><blockquote><p>Hello World</p></blockquote></blockquote></blockquote><ul><li><strong>列表</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.无序列表</span><br><span class="line">使用（*）、（+）、（-）作为列表标记；</span><br><span class="line">后面加上内容就会有列表的效果了。</span><br><span class="line"></span><br><span class="line">2.有序列表</span><br><span class="line">使用数字加上（.）作为列表标记；</span><br><span class="line">后面同样加上内容。</span><br><span class="line"></span><br><span class="line">3.列表嵌套</span><br><span class="line">其实就是一个列表里再次使用列表，要嵌套的列表首行空四格，然后接上面的无序列表格式或者有序列表格式就行了。</span><br></pre></td></tr></table></figure><p>  <strong>效果就不展示了，自己去试试就好了（最主要你看这篇文章页面的一个个带小黑点的就是列表）。</strong></p><h1 id="内嵌代码"><a href="#内嵌代码" class="headerlink" title="内嵌代码"></a>内嵌代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">代码阅读可是程序员必备，所以有专门的代码格式那是必须的。</span><br><span class="line"></span><br><span class="line">单行代码：代码之间分别用一个反引号包起来。</span><br><span class="line">像这样：&#96;Hello World&#96;</span><br><span class="line"></span><br><span class="line">代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行。</span><br><span class="line">像这样：</span><br><span class="line">​\&#96;\&#96;\&#96;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;&quot;Hello World&quot;&lt;&lt;endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">​\&#96;\&#96;\&#96;</span><br></pre></td></tr></table></figure><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">图片还是比较常用的</span><br><span class="line"></span><br><span class="line">![alt 属性文本](图片地址)</span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br><span class="line"></span><br><span class="line">当然可以使用上面高级链接的格式，依据个人喜好。</span><br></pre></td></tr></table></figure><p>  <strong>效果就不展示了，自己去试试就好了</strong></p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 居中对齐 | 右对齐 |</span><br><span class="line">| ------ | :------: | -----: |</span><br><span class="line">| 单元格 |  单元格  | 单元格 |</span><br><span class="line">| 单元格 |  单元格  | 单元格 |</span><br></pre></td></tr></table></figure><h1 id="Markdown高级技巧"><a href="#Markdown高级技巧" class="headerlink" title="Markdown高级技巧"></a>Markdown高级技巧</h1><ul><li><p><strong>支持HTML元素</strong></p><p>原生Markdown语法是支持HTML的，所以Markdown无法表示的直接用HTML编辑就好了。</p></li></ul><ul><li><p><strong>转义</strong></p><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\*\* Hello World \*\*</span><br></pre></td></tr></table></figure></li><li><p><strong>流程图和公式</strong></p><p>请自行查阅文献，再见，我也不会用。</p></li></ul><h1 id="溜了溜了"><a href="#溜了溜了" class="headerlink" title="溜了溜了"></a>溜了溜了</h1><p>  Markdown确实便利，而且现在很多平台都支持Markdown编写文章，所以得多加练习，编写文章的速度会大大提升的。</p><p>  当然，一个好的文本编辑器也重要，我用的是Typora简洁快捷，另外Markdown2和Visual Studio Coding都不错。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Markdown&lt;/strong&gt;是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。&lt;br&gt;我经常用他来写博客写文章，因为比较简洁（其实是&lt;del&gt;我比较懒&lt;/del&gt;），但是确实和HTML编写相比，功能虽然少，但是十分轻便快捷，并且应该是能满足你编写的需求了。&lt;/p&gt;
&lt;p&gt;虽然有很多支持&lt;strong&gt;Markdown&lt;/strong&gt;语法的编辑器，就比如说Typora、MarkdownPad2这种文本编辑器，非常的方便，但是呢，作为一个语法还是最好了解一下，也用不了几分钟就会了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="琐" scheme="http://banhoo.top/categories/%E7%90%90/"/>
    
    
      <category term="Markdown" scheme="http://banhoo.top/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法分析/表</title>
    <link href="http://banhoo.top/2020/03/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/%E8%A1%A8/"/>
    <id>http://banhoo.top/2020/03/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/%E8%A1%A8/</id>
    <published>2020-03-21T01:19:00.000Z</published>
    <updated>2020-03-22T12:33:12.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>抽象数据类型（Abstract Data Type , ADT）</strong>是一些操作的集合。抽象数据类型是数学的抽象，在ADT的定义中根本没涉及如何实现这些操作。这可以看作模块化设计的扩充。</p><h1 id="表-ADT"><a href="#表-ADT" class="headerlink" title="表 ADT"></a>表 ADT</h1><ul><li><p><strong>普通表</strong>：形如A1,A2,A3,……，An。表的大小是n，而且我们称大小为0的表为空表。</p></li><li><p><strong>后继</strong>：对于除空表外的任何表，A（i+1）是A（i）的后继。</p></li><li><p><strong>前驱</strong>：对于除空表外的任何表，A（i-1）是A（i）的前驱。</p></li></ul><p>  <strong>注意</strong>：A1不定义前驱元，也不定义An的后继元。</p><ul><li><p><strong>表的一些操作集合</strong>：</p><ul><li>PrintList：打印表；</li><li>MakeEmpty：清空表的元素；</li><li>Find：返回关键字首次出现的位置；</li><li>Insert：在表的某个位置插入某个元素；</li><li>Delete：在表的某个位置删除某个元素；</li><li>FindKth：返回某个位置上（作为参数指定）的元素。</li></ul><p>当然可以自己另外添加一些运算，例如Next和Previous，它们会取一个位置作为参数并分别返回其后继元和前驱元的位置。</p></li></ul><h1 id="表的数组实现"><a href="#表的数组实现" class="headerlink" title="表的数组实现"></a>表的数组实现</h1><p>对于表的所有操作都可以使用数组来实现。虽然数组是动态指定的，但还是需要对表的大小的最大值进行估计。通常需要估计得大一些，而这会浪费大量的空间。</p><p>数组实现是的PrintList和Find正如所预期的那样以线性时间执行，而FindKth则花费常数时间。然而，Insert和Delete花费是最昂贵的，最坏的情况为O（N），平均来看也要线性时间。只通过N次相继插入来建立一个表将需要二次时间。</p><p><strong>下面来看看C++代码：</strong></p><ul><li><p><strong>简洁版</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType data[MAXSIZE];</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitSeqList</span><span class="params">(SqList&amp; L)</span><span class="comment">//初始化顺序表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(L.data, <span class="number">0</span>, <span class="keyword">sizeof</span>(L.data));</span><br><span class="line">L.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(SqList&amp; L)</span><span class="comment">//判断是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (L.length == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">(SqList&amp; L)</span><span class="comment">//返回表的长度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> L.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisSeqList</span><span class="params">(SqList&amp; L)</span><span class="comment">//输出顺序表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; L.data[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetElem</span><span class="params">(SqList&amp; L, <span class="keyword">int</span> i, ElemType&amp; e)</span><span class="comment">//获取顺序表第i个元素，并赋值给e</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; i &lt; L.length)</span><br><span class="line">&#123;</span><br><span class="line">e = L.data[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Can't find element "</span>&lt;&lt;i&lt;&lt;<span class="string">" !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindElem</span><span class="params">(SqList&amp; L, ElemType e)</span><span class="comment">//查找元素e的位置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line"><span class="keyword">if</span> (L.data[i] == e)</span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Can't find element "</span> &lt;&lt; e &lt;&lt; <span class="string">" !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListInsert</span><span class="params">(SqList&amp; L, <span class="keyword">int</span> i, ElemType&amp; e)</span><span class="comment">//在顺序表第i处，插入数据e</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L.length &gt;= MAXSIZE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: The sequence is full and can't be inserted !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Insetion position error !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = L.length; j &gt; i - <span class="number">2</span>; j--)</span><br><span class="line">L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">L.data[i - <span class="number">1</span>] = e;</span><br><span class="line">L.length++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(SqList&amp; L, <span class="keyword">int</span> i, ElemType&amp; e)</span><span class="comment">//删除第i位置的数据e</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e = L.data[i];<span class="comment">//对删除数据进行备份,可以自选删除</span></span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; i &lt; L.length)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &lt; L.length; j++)</span><br><span class="line">L.data[j] = L.data[j + <span class="number">1</span>];</span><br><span class="line">L.length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//自己去试试功能吧！</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>复杂版</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Node ElemType</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>//创建一个节点类</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">DataType data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqList</span>//创建一个顺序表类</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Node* elem;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">SqList();</span><br><span class="line">~SqList();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateSqList</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TraverseSqList</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">ElemType <span class="title">GetElemByIndex</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetElemByElem</span><span class="params">(DataType data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertSqList</span><span class="params">(<span class="keyword">int</span> n, DataType data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSqListAtHead</span><span class="params">(DataType data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSqListAtEnd</span><span class="params">(DataType data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteElem</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteElemAtElem</span><span class="params">(DataType data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteAll</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteAtHead</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SqList::SqList()<span class="comment">//初始化顺序表</span></span><br><span class="line">&#123;</span><br><span class="line">elem = <span class="keyword">new</span> ElemType[MAXSIZE];</span><br><span class="line"><span class="keyword">if</span> (!elem) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SqList::~SqList()<span class="comment">//销毁顺序表</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] elem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SqList::CreateSqList</span><span class="params">(<span class="keyword">int</span> n)</span><span class="comment">//创建长度为n的顺序表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">&#123;                               </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Wrong number of nodes entered !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input number "</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">"node:"</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; elem[i].data;</span><br><span class="line">&#125;</span><br><span class="line">length = n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SqList::TraverseSqList</span><span class="params">()</span><span class="comment">//遍历输出顺序表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)<span class="comment">//循环打印顺序表的每个节点数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Number"</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">"element is "</span> &lt;&lt; elem[i].data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">ElemType <span class="title">SqList::GetElemByIndex</span><span class="params">(<span class="keyword">int</span> i)</span><span class="comment">//通过下标获取元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; length)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Index of query does not exist !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> elem[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SqList::isEmpty</span><span class="params">()</span><span class="comment">//判断顺序表是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SqList::isFull</span><span class="params">()</span><span class="comment">//判断顺序表是否满</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (length == MAXSIZE) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SqList::GetLength</span><span class="params">()</span><span class="comment">//获取顺序表的长度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SqList::GetElemByElem</span><span class="params">(DataType data)</span><span class="comment">//判断是否存在寻找的值,如果存在将返回下标</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (elem &amp;&amp; elem[i].data == data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == length - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SqList::InsertSqList</span><span class="params">(<span class="keyword">int</span> i, DataType data)</span><span class="comment">//在第i个位置，插入一个数据</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">1</span> || i &gt; length + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Insertion position error !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (length &gt;= MAXSIZE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: The sequence is full and can't be inserted !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = length - <span class="number">1</span>; j &gt;= i - <span class="number">1</span>; j--)</span><br><span class="line">elem[j + <span class="number">1</span>] = elem[j];</span><br><span class="line">elem[i - <span class="number">1</span>].data = data;</span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SqList::InsertSqListAtHead</span><span class="params">(DataType data)</span><span class="comment">//在头部插入一个新数据</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">elem[i + <span class="number">1</span>] = elem[i];</span><br><span class="line">elem[<span class="number">0</span>].data = data;</span><br><span class="line">length++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SqList::InsertSqListAtEnd</span><span class="params">(DataType data)</span><span class="comment">//在顺序表的最后插入数据</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (length &gt;= MAXSIZE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: The sequence is full and can't be inserted !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">elem[length].data = data;</span><br><span class="line">length++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SqList::DeleteElem</span><span class="params">(<span class="keyword">int</span> i)</span><span class="comment">//删除第i个节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;length)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: Wrong number of nodes entered !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = i; j &lt;= length - <span class="number">1</span>; j++)</span><br><span class="line">elem[j - <span class="number">1</span>] = elem[j];</span><br><span class="line">length--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SqList::DeleteElemAtElem</span><span class="params">(DataType data)</span><span class="comment">//按值删除元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (elem[i].data != data &amp;&amp; i &lt; length)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> index = i; index &lt;= length - <span class="number">1</span>; index++)</span><br><span class="line">&#123;</span><br><span class="line">elem[index] = elem[index + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">length--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SqList::DeleteAll</span><span class="params">()</span><span class="comment">//删除所有元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = length; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">elem[i] = elem[i - <span class="number">1</span>];</span><br><span class="line">length--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SqList::DeleteAtHead</span><span class="params">()</span><span class="comment">//从头部删除元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= length - <span class="number">1</span>; i++)</span><br><span class="line">elem[i - <span class="number">1</span>] = elem[i];</span><br><span class="line">length--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>相关资料</strong>：<a href="https://blog.csdn.net/qq_35143440/article/details/78917632?depth_1-utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener external nofollow noreferrer">C++实现顺序表的14种操作</a></p></blockquote><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;抽象数据类型（Abstract Data Type , ADT）&lt;/strong&gt;是一些操作的集合。抽象数据类型是数学的抽象，在ADT的定义中根本没涉及如何实现这些操作。这可以看作模块化设计的扩充。&lt;/p&gt;
&lt;h1 id=&quot;表-ADT&quot;&gt;&lt;a href=&quot;#表-ADT&quot; class=&quot;headerlink&quot; title=&quot;表 ADT&quot;&gt;&lt;/a&gt;表 ADT&lt;/h1&gt;
    
    </summary>
    
    
      <category term="书记" scheme="http://banhoo.top/categories/%E4%B9%A6%E8%AE%B0/"/>
    
      <category term="《数据结构与算法分析》" scheme="http://banhoo.top/categories/%E4%B9%A6%E8%AE%B0/%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E3%80%8B/"/>
    
    
      <category term="书记" scheme="http://banhoo.top/tags/%E4%B9%A6%E8%AE%B0/"/>
    
      <category term="数据结构" scheme="http://banhoo.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>算法竞赛入门经典/第2章 循环结构程序设计</title>
    <link href="http://banhoo.top/2020/02/18/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/%E7%AC%AC2%E7%AB%A0%20%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://banhoo.top/2020/02/18/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/%E7%AC%AC2%E7%AB%A0%20%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</id>
    <published>2020-02-18T01:19:00.000Z</published>
    <updated>2020-03-21T08:26:57.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第2章-循环结构程序设计"><a href="#第2章-循环结构程序设计" class="headerlink" title="第2章 循环结构程序设计"></a>第2章 循环结构程序设计</h1><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><blockquote><p>for循环的格式为：for(初始化；条件；调整) 循环体；</p></blockquote><ul><li>编写程序时，要特别留意“当前行”的跳转和变量的改变。</li><li>建议尽量缩短变量的定义范围。例如，在for循环的初始化部分定义循环变量。</li></ul><p><strong>1. aabb：输出所有形如aabb的4位完全平方数（即前两位数字相等，后两位数字也相等）。</strong></p><blockquote><p>7744问题（1）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">for(int a&#x3D;1;a&lt;&#x3D;9;a++)</span><br><span class="line">for(int b&#x3D;0;b&lt;&#x3D;9;b++)</span><br><span class="line">&#123;</span><br><span class="line">int n&#x3D;a*1100+b*11;&#x2F;&#x2F;这里才开始使用n，因此在这里定义n</span><br><span class="line">int m&#x3D;floor(sqrt(n)+0.5);&#x2F;&#x2F;四舍五入</span><br><span class="line">if(m*m)&#x3D;&#x3D;n printf(&quot;%d\n&quot;,n);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数floor(x)的功能是返回不超过x的最大整数。</li><li>如果使用语句<strong>if(sqrt(n)==floor(sqrt(n))) printf(“%d\n”,n);</strong>，即直接判断sqrt(n)是否为整数。理论上当然没问题，但是这样写不保险，因为浮点数的运算（和函数）有可能存在误差。</li><li>浮点运算可能存在误差。在进行浮点数比较时，应考虑到浮点误差。</li></ul><blockquote><p>7744问题（2）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*该思路为枚举平方根，从而避免开平方操作，比开平方运算快。*&#x2F;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">for(int x&#x3D;1;;x++)</span><br><span class="line">&#123;</span><br><span class="line">int n&#x3D;x*x;</span><br><span class="line">if(n&lt;1000) continue;</span><br><span class="line">if(n&gt;9999) break;</span><br><span class="line">int hi&#x3D;n&#x2F;100;&#x2F;&#x2F;求前两位数</span><br><span class="line">int lo&#x3D;n%100;&#x2F;&#x2F;求后两位数</span><br><span class="line">if(hi&#x2F;10&#x3D;&#x3D;hi%10&amp;&amp;lo&#x2F;10&#x3D;&#x3D;lo%10) printf(&quot;%d\n&quot;,n);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="while循环和do-while循环"><a href="#while循环和do-while循环" class="headerlink" title="while循环和do-while循环"></a>while循环和do-while循环</h2><blockquote><p>while循环的格式为：while（条件） 循环体；</p></blockquote><p><strong>2. 3n+1问题：<br>猜想：对于任意大于1的自然数n，若n为奇数，则将n变为3n+1，否则变为n的一半。经过若干次这样的变换，一定会时n变为1。例如，3-&gt;10-&gt;5-&gt;16-&gt;8-&gt;4-&gt;2-&gt;1。输入n，输出变换的次数。n&lt;=10⁹。</strong></p><blockquote><p>3n+1问题（有bug）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n,count&#x3D;0;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">while(n&gt;1)</span><br><span class="line">&#123;</span><br><span class="line">if(n%2&#x3D;&#x3D;1) n&#x3D;n*3+1;</span><br><span class="line">else n&#x2F;&#x3D;2;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d\n&quot;,count);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当需要统计某种事物的个数时，可以用一个变量来充当计数器。</li><li>在观察无法找出错误时，可以用<strong>输出中间结果</strong>的方法差错。例如本题可在给n做变换的语句后加一条输出语句printf(“%d\n”,n)。很快就可找到问题：乘法溢出。</li><li>int整数的大小很可能是-2147483648至2147683647，即-2³¹~2³¹-1。“很可能”是因为C99中只规定了int至少是16位，却没有规定具体值。目前几乎在所有的比赛平台上，int都是32位整数。</li></ul><blockquote><p>3n+1问题</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n2,count&#x3D;0;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n2);</span><br><span class="line">long long n&#x3D;n2;&#x2F;&#x2F;避开对long long的输入输出</span><br><span class="line">while(n&gt;1)</span><br><span class="line">&#123;</span><br><span class="line">if(n%2&#x3D;&#x3D;1) n&#x3D;n*3+1;</span><br><span class="line">else n&#x2F;&#x3D;2;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d\n&quot;,count);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>long long在Linux下的输入输出格式符为%lld，但Windows平台中又是为%I64d。</li><li>do-while循环的格式为<strong>“do {循环体} while（条件）；”</strong>其中循环至少执行一次，每次执行完循环体后判断条件，当条件满足时继续循环。循环终止判断是在计算之后，而不是计算之前，这样的情况很适合使用do-while循环。</li></ul><h2 id="循环的代价"><a href="#循环的代价" class="headerlink" title="循环的代价"></a>循环的代价</h2><p><strong>3. 阶乘之和：输入n，计算S=1！+2！+3！+···+n！的末6位（不含前导0）。n&lt;=10⁶，n!表示前n个正整数之积。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;time.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">const int MOD&#x3D;1000000;</span><br><span class="line">int n,S&#x3D;0;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">int factorial&#x3D;1;</span><br><span class="line">for(int j&#x3D;1;j&lt;&#x3D;i;j++)</span><br><span class="line">factorial&#x3D;(factorial*j%MOD);</span><br><span class="line">S&#x3D;(S+factorial)%MOD;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d\n&quot;,S);</span><br><span class="line">printf(&quot;Time used&#x3D;%.2f\n&quot;,(double)clock()&#x2F;CLOCKS_PER_SEC);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>要计算只包含加法、减法和乘法额整数表达式除以正整数n的余数，可以在每步计算之后对n取余，结果不变。</li><li>可以使用time.h和clock()函数获得程序运行时间。常数CLOCKS_PER_SEC和操作系统相关，但是不要直接使用clock()的返回值，而应总是除以CLOCKS_PER_SEC。</li><li>为了避免输入数据的时间影响测试结果，可以使用<strong>“管道”</strong>的小技巧：在Windows命令行下执行<strong>echo 20|abc</strong>，操作系统会自动把20输入，其中abc为程序名。</li></ul><h2 id="算法竞赛中的输入输出框架"><a href="#算法竞赛中的输入输出框架" class="headerlink" title="算法竞赛中的输入输出框架"></a>算法竞赛中的输入输出框架</h2><p><strong>4. 数据统计：输入一些整数，求出它们的最小值、最大值和平均值（保留3位小数）。输入保证这些数都是不超过1000的整数。</strong></p><blockquote><p>: 数据统计（重定向版）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#define LOCAL&#x2F;&#x2F;比赛提交之前删除即可</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#define INF 1000000000</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">FILE* stream;</span><br><span class="line">#ifdef LOCAL</span><br><span class="line">freopen_s(&amp;stream,&quot;data.in&quot;,&quot;r&quot;,stdin);&#x2F;&#x2F;自己在程序文件夹中创建</span><br><span class="line">freopen_s(&amp;stream,&quot;data.out&quot;,&quot;w&quot;,stdout);</span><br><span class="line">#endif</span><br><span class="line">int x, n &#x3D; 0, min &#x3D; INF, max &#x3D; -INF, s &#x3D; 0;</span><br><span class="line">while (scanf_s(&quot;%d&quot;, &amp;x) &#x3D;&#x3D; 1)</span><br><span class="line">&#123;</span><br><span class="line">s +&#x3D; x;</span><br><span class="line">if (x &lt; min) min &#x3D; x;</span><br><span class="line">if (x &gt; max) max &#x3D; x;</span><br><span class="line">&#x2F;*printf(&quot;x&#x3D;%d,min&#x3D;%d,max&#x3D;%d\n&quot;,x,min,max);*&#x2F;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d %d %.3f\n&quot;,min,max,(double)s&#x2F;n);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>scanf函数有返回值，它返回的是成功输入的变量个数，但输入结束时，scanf函数无法再次读取x，将返回0。</li></ul><blockquote><p>数据统计（fopen版）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#define INF 100000000</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">errno_t err;</span><br><span class="line">FILE* fin, * fout;</span><br><span class="line">&#x2F;&#x2F;fin &#x3D; stdin;</span><br><span class="line">&#x2F;&#x2F;fout &#x3D; stdout;</span><br><span class="line">err &#x3D; fopen_s(&amp;fin,&quot;data.in&quot;,&quot;rb&quot;);</span><br><span class="line">err &#x3D; fopen_s(&amp;fout,&quot;data.out&quot;,&quot;wb&quot;);</span><br><span class="line">int x, n &#x3D; 0, min &#x3D; INF, max &#x3D; -INF, s &#x3D; 0;</span><br><span class="line">while (fscanf_s(fin, &quot;%d&quot;, &amp;x) &#x3D;&#x3D; 1)</span><br><span class="line">&#123;</span><br><span class="line">s +&#x3D; x;</span><br><span class="line">if (x &lt; min) min &#x3D; x;</span><br><span class="line">if (x &gt; max) max &#x3D; x;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line">fprintf_s(fout,&quot;%d %d %.3f\n&quot;,min,max,(double)s&#x2F;n);</span><br><span class="line">fclose(fin);</span><br><span class="line">fclose(fout);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果想把fopen版的程序改成读写标准输入输出，只需赋值“fin=stdin，fout=stdout”，即可，不需要调用fopen和fclose。</li></ul><hr><blockquote><p>习题2-5 分数化小数<br>输入正整数a，b，c，输出a/b的小数形式，精确到小数点后c位。a，b&lt;=10^6,c&lt;=100。输入包含多组数据，结束标记位a=b=c=0。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int n, m[110];&#x2F;&#x2F;n整数部分，m小数部分 </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a, b, c, i, k &#x3D; 0;</span><br><span class="line">    while (scanf_s(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;c) &amp;&amp; a &amp;&amp; b &amp;&amp; c)</span><br><span class="line">    &#123;</span><br><span class="line">        k++;</span><br><span class="line">        n &#x3D; a &#x2F; b;</span><br><span class="line">        a &#x3D; a % b;</span><br><span class="line">        m[0] &#x3D; 0;&#x2F;&#x2F;十分位小数，可以进位为整数</span><br><span class="line">        for (i &#x3D; 1; i &lt;&#x3D; c; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            m[i] &#x3D; a * 10 &#x2F; b;</span><br><span class="line">            a &#x3D; a * 10 % b;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a * 10 &#x2F; b &gt;&#x3D; 5)&#x2F;&#x2F;第C+1位，四舍五入</span><br><span class="line">        &#123;</span><br><span class="line">            for (i &#x3D; c; i &gt;&#x3D; 0; i--)&#x2F;&#x2F;进位处理 </span><br><span class="line">            &#123;</span><br><span class="line">                m[i] &#x3D; m[i] + 1;</span><br><span class="line">                if (m[i] &lt; 10)</span><br><span class="line">                    break;&#x2F;&#x2F;若不存在进位，跳出循环。 </span><br><span class="line">                else</span><br><span class="line">                    m[i] -&#x3D; 10;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        n &#x3D; n + m[0];&#x2F;&#x2F;整数部分进位处理。 </span><br><span class="line">        printf(&quot;Case %d: %d.&quot;, k, n);&#x2F;&#x2F;打印整数部分及小数点</span><br><span class="line">        for (i &#x3D; 1; i &lt;&#x3D; c; i++)</span><br><span class="line">            printf(&quot;%d&quot;, m[i]);&#x2F;&#x2F;打印小数部分。 </span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>习题2-6 排列<br>用 1，2，3，……，9组成3个三位数abc，def和ghi，每个数字恰好使用一次，要求abc：def：ghi=1：2：3。按照“abc def ghi”的格式输出所有解，每行一个解。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">int i,j,v;bool a[10];&#x2F;&#x2F;ai表示第i个数已经用过了</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    for(i&#x3D;192;i&lt;&#x3D;327;i++)&#x2F;&#x2F;第一个数最小192，最大327。其实不知道的情况下简单来说是从123-329的但是算出来是最值就稍微改了下下</span><br><span class="line">    &#123;</span><br><span class="line">        memset(a,0,sizeof(a));v&#x3D;0;&#x2F;&#x2F;清零</span><br><span class="line">        a[i%10]&#x3D;a[i&#x2F;10%10]&#x3D;a[i&#x2F;100]&#x3D;a[i*2%10]&#x3D;a[i*2&#x2F;10%10]&#x3D;a[i*2&#x2F;100]&#x3D;a[i*3%10]&#x3D;a[i*3&#x2F;10%10]&#x3D;a[i*3&#x2F;100]&#x3D;1;&#x2F;&#x2F;统计数字</span><br><span class="line">        for(j&#x3D;1;j&lt;&#x3D;9;j++) v+&#x3D;a[j];&#x2F;&#x2F;v表示1-9这些数字是否全部齐了</span><br><span class="line">        if(v&#x3D;&#x3D;9) printf(&quot;%d %d %d\n&quot;,i,i*2,i*3);&#x2F;&#x2F;如果齐了就输出</span><br><span class="line">    &#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">double i;</span><br><span class="line">for (i &#x3D; 0; i !&#x3D; 10; i +&#x3D; 0.1)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%.1f\n&quot;, i);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*这块代码会进入死循环：浮点数陷阱</span><br><span class="line"></span><br><span class="line">计算机的浮点数运算总会有误差（由“舍入”等引起），i自加0.1后并不是按照我们预想一样变成0.1，而是可能会变成0.100……01.</span><br><span class="line">这就是造成i ！&#x3D; 10这一条件永远成立的原因。</span><br><span class="line"></span><br><span class="line">实际上，计算机中的所有数据都用二进制表示，包括浮点数。这就导致某些浮点数不能用二进制精确表示，例如0.1（这很容易理解，就像10&#x2F;3不能被十进制精确表示一样）</span><br><span class="line"></span><br><span class="line">进一步地说，浮点数是采用分数+指数来表示的，例如</span><br><span class="line"></span><br><span class="line">0.5 &#x3D; 1&#x2F;2</span><br><span class="line"></span><br><span class="line">0.75 &#x3D; 1&#x2F;2 + 1&#x2F;(2^2)</span><br><span class="line"></span><br><span class="line">0.875 &#x3D; 1&#x2F;2 + 1&#x2F;(2^2) + 1&#x2F;(2^3)</span><br><span class="line"></span><br><span class="line">0.1 &#x3D; 1&#x2F;(2^4) + 1&#x2F;(2^5) + 1&#x2F;(2^8) + ...</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><blockquote><p><strong>本章学习感悟：</strong><br>这行代码我看的时候感觉就会输出10.0。但是书上说<strong>“请上机实验，不要凭主观感觉回答”</strong>，然后我就直接测试了一下，结果出乎意料！果然计算机不落实到实践上，光凭理论学习是不行的。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第2章-循环结构程序设计&quot;&gt;&lt;a href=&quot;#第2章-循环结构程序设计&quot; class=&quot;headerlink&quot; title=&quot;第2章 循环结构程序设计&quot;&gt;&lt;/a&gt;第2章 循环结构程序设计&lt;/h1&gt;&lt;h2 id=&quot;for循环&quot;&gt;&lt;a href=&quot;#for循环&quot; class=&quot;headerlink&quot; title=&quot;for循环&quot;&gt;&lt;/a&gt;for循环&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;for循环的格式为：for(初始化；条件；调整) 循环体；&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="书记" scheme="http://banhoo.top/categories/%E4%B9%A6%E8%AE%B0/"/>
    
      <category term="《算法竞赛（入门经典）》" scheme="http://banhoo.top/categories/%E4%B9%A6%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%EF%BC%88%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8%EF%BC%89%E3%80%8B/"/>
    
    
      <category term="书记" scheme="http://banhoo.top/tags/%E4%B9%A6%E8%AE%B0/"/>
    
      <category term="算法（基础）" scheme="http://banhoo.top/tags/%E7%AE%97%E6%B3%95%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>算法竞赛入门经典/第1章 程序设计入门</title>
    <link href="http://banhoo.top/2020/02/16/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/%E7%AC%AC1%E7%AB%A0%20%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8/"/>
    <id>http://banhoo.top/2020/02/16/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/%E7%AC%AC1%E7%AB%A0%20%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8/</id>
    <published>2020-02-16T04:00:00.000Z</published>
    <updated>2020-03-21T09:23:53.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-程序设计入门"><a href="#第1章-程序设计入门" class="headerlink" title="第1章 程序设计入门"></a>第1章 程序设计入门</h1><h2 id="算数表达式"><a href="#算数表达式" class="headerlink" title="算数表达式"></a>算数表达式</h2><ol><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%.1f\n&quot;,8.0&#x2F;5.0);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>上面的<strong>%.1f</strong>意为输出结果保留小数点后1位。</li><li>整数值用<strong>%d</strong>输出，实数用<strong>%f</strong>输出。</li><li>整数/整数=整数；浮点数/浮点数=浮点数。</li></ul><ol start="2"><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%.8f\n&quot;,1+2*sqrt(3)&#x2F;(5-0.1));</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>5-0.1</strong>是什么？<br>确切的说法是：整数先变成浮点数，然后浮点数-浮点数=浮点数。</li><li>数学函数<strong>sqrt(x)</strong>作用是计算x的算术平方根，返回值类型为double。</li></ul><h2 id="变量及其输入"><a href="#变量及其输入" class="headerlink" title="变量及其输入"></a>变量及其输入</h2><ol start="3"><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a,b;</span><br><span class="line">scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">printf(&quot;%d\n&quot;,a+b);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>scanf中的占位符和变量的数据类型应一一对应，且每个变量前需要加<strong>&amp;</strong>符号。</li></ul><ol start="4"><li>圆柱体的表面积：输入底面半径r和高h，输出圆柱体的表面积，保留3位小数。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">&#123;</span><br><span class="line">const double pi&#x3D;acos(-1.0);</span><br><span class="line">double r,h,s1,s2,s;</span><br><span class="line">scanf(&quot;%lf%lf&quot;,&amp;r,&amp;h);</span><br><span class="line">s1&#x3D;pi*r*r;</span><br><span class="line">s2&#x3D;2*pi*r*h;</span><br><span class="line">s&#x3D;s1*2.0+s2;</span><br><span class="line">printf(&quot;Area&#x3D;%.3f\n&quot;,s);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>在算法竞赛中，每行输出均应以回车符结束，包括最后一行。除非特别说明，每一行的行首不应有空格，但行末通常可以有多余空格。另外，输出的每两个书或者字符串之间应以单个空格隔开。</li><li>尽量用const关键字声明常数。<strong>表达常数∏：const double pi=acos(-1,0)</strong></li><li>赋值是个动作，先计算右边的值，在付给左边的变量，覆盖它原来的值。</li><li>输入采用的是<strong>%lf</strong>而不是%f。</li></ul><h2 id="顺序结构程序设计"><a href="#顺序结构程序设计" class="headerlink" title="顺序结构程序设计"></a>顺序结构程序设计</h2><ol start="5"><li><p>三位数反转：输入一个三位数，分离出他的百位、十位和个位，反转后输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n,m;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">m&#x3D;(n%10)*100+(n&#x2F;10%10)*10+(n&#x2F;100);</span><br><span class="line">printf(&quot;%03d\n&quot;,m);&#x2F;&#x2F;保留三位有效数字，不足左补0</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>交换变量：输入两个整数a和b，交换二者的值，然后输出。</p><blockquote><p>: （1）三变量法（经典）</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a,b,t;</span><br><span class="line">scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">t&#x3D;a;</span><br><span class="line">a&#x3D;b;</span><br><span class="line">b&#x3D;t;</span><br><span class="line">printf(&quot;%d %d\n&quot;,a,b);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>: （2）不借助任何变量（只适用于定义了加减法的数据类型）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a,b;</span><br><span class="line">scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">a&#x3D;a+b;</span><br><span class="line">b&#x3D;a-b;</span><br><span class="line">a&#x3D;a-b;</span><br><span class="line">printf(&quot;%d %d\n&quot;,a,b);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>: （3）最适合本题的解法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a,b;</span><br><span class="line">scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">printf(&quot;%d %d\n&quot;,b,a);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们的目标是解决问题，而不是为了写程序而写程序，同时应保持简单（Keep It Simple and Stupid,KISS），而不是自己创造条件去展示编程技巧。</li></ul><h2 id="分支结构程序设计"><a href="#分支结构程序设计" class="headerlink" title="分支结构程序设计"></a>分支结构程序设计</h2><ol start="7"><li>鸡兔同笼：已知鸡和兔的总数量位n，总腿数为m。输入n和m，依次输出鸡的数目和兔的数目。如果无解则输出No answer。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a,b,n,m;</span><br><span class="line">scanf(&quot;%d%d&quot;,&amp;n,&amp;m);</span><br><span class="line">a&#x3D;(4*n-m)&#x2F;2;</span><br><span class="line">b&#x3D;n-a;</span><br><span class="line">if(m%2&#x3D;&#x3D;1||a&lt;0||b&lt;0)</span><br><span class="line">printf(&quot;No answer\n&quot;);</span><br><span class="line">else</span><br><span class="line">printf(&quot;%d %d\n&quot;,a,b);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>C语言中的逻辑运算符都是短路运算符。一旦能够确定整个表达式的值，就不再继续计算。</li></ul><ol start="8"><li>三整数排序<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a,b,c,t;</span><br><span class="line">scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);</span><br><span class="line">if(a&gt;b) &#123;t&#x3D;a;a&#x3D;b;b&#x3D;t;&#125;</span><br><span class="line">if(a&gt;c) &#123;t&#x3D;a;a&#x3D;c;c&#x3D;t;&#125;</span><br><span class="line">if(b&gt;c) &#123;t&#x3D;b;b&#x3D;c;c&#x3D;t;&#125;</span><br><span class="line">printf(&quot;%d %d %d\n&quot;,a,b,c);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第1章-程序设计入门&quot;&gt;&lt;a href=&quot;#第1章-程序设计入门&quot; class=&quot;headerlink&quot; title=&quot;第1章 程序设计入门&quot;&gt;&lt;/a&gt;第1章 程序设计入门&lt;/h1&gt;&lt;h2 id=&quot;算数表达式&quot;&gt;&lt;a href=&quot;#算数表达式&quot; class=&quot;headerlink&quot; title=&quot;算数表达式&quot;&gt;&lt;/a&gt;算数表达式&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	printf(&amp;quot;%.1f\n&amp;quot;,8.0&amp;#x2F;5.0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="书记" scheme="http://banhoo.top/categories/%E4%B9%A6%E8%AE%B0/"/>
    
      <category term="《算法竞赛（入门经典）》" scheme="http://banhoo.top/categories/%E4%B9%A6%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%EF%BC%88%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8%EF%BC%89%E3%80%8B/"/>
    
    
      <category term="书记" scheme="http://banhoo.top/tags/%E4%B9%A6%E8%AE%B0/"/>
    
      <category term="算法（基础）" scheme="http://banhoo.top/tags/%E7%AE%97%E6%B3%95%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Welcome to Banhoo</title>
    <link href="http://banhoo.top/2020/02/13/welcome-to-Banhoo/"/>
    <id>http://banhoo.top/2020/02/13/welcome-to-Banhoo/</id>
    <published>2020-02-13T14:06:09.000Z</published>
    <updated>2020-03-13T08:52:03.835Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to Banhoo!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to Banhoo!&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://banhoo.top/2020/02/04/hello-world/"/>
    <id>http://banhoo.top/2020/02/04/hello-world/</id>
    <published>2020-02-04T08:40:34.979Z</published>
    <updated>2020-02-12T14:30:32.265Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener external nofollow noreferrer">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener external nofollow noreferrer">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener external nofollow noreferrer">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener external nofollow noreferrer">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener external nofollow noreferrer">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener external nofollow noreferrer">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener external nofollow noreferrer">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener external nofollow noreferrer">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
